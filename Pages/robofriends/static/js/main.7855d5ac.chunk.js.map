{"version":3,"sources":["SearchBox.js","Card.js","CardList.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","react_default","a","createElement","className","type","placeholder","onChange","this","props","eventFunc","React","Component","Card","alt","src","concat","id","name","email","CardList","user","src_Card_0","key","cardArray","arrayObjs","map","createCard","robots","username","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","state","objList","_this2","filteredElements","filter","string","toLowerCase","includes","src_SearchBox","src_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAceA,0LAVP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCAAmCC,KAAK,SAASC,YAAY,yBAC7EC,SAAUC,KAAKC,MAAMC,oBALdC,IAAMC,YCefC,0LAZP,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKW,IAAI,cAAcC,IAAG,wBAAAC,OAA0BR,KAAKC,MAAMQ,GAArC,eAC1BhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKK,KAAKC,MAAMS,MAChBjB,EAAAC,EAAAC,cAAA,UAAKK,KAAKC,MAAMU,gBAPjBP,cCeJQ,qLAbAC,GACP,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,CAAMC,IAAKF,EAAKJ,GAAIA,GAAII,EAAKJ,GAAIC,KAAMG,EAAKH,KAAMC,MAAOE,EAAKF,yCAIrE,IAAMK,EAAYhB,KAAKC,MAAMgB,UAAUC,IAAIlB,KAAKmB,YAEhD,OAAQ1B,EAAAC,EAAAC,cAAA,WACKqB,UAVEb,IAAMC,WC4DdgB,EA/DA,CACb,CACEX,GAAI,EACJC,KAAM,gBACNW,SAAU,OACVV,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNW,SAAU,YACVV,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNW,SAAU,WACVV,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNW,SAAU,WACVV,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNW,SAAU,SACVV,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNW,SAAU,mBACVV,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNW,SAAU,eACVV,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNW,SAAU,gBACVV,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNW,SAAU,WACVV,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNW,SAAU,iBACVV,MAAO,2BCvBIW,cA7Bb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAxB,KAAAsB,IACXC,EAAAC,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA5B,QAOF6B,eAAiB,SAACC,GAChBP,EAAKQ,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAP1CX,EAAKY,MAAQ,CACXC,QAAShB,EACTY,YAAa,IAJJT,wEAaJ,IAAAc,EAAArC,KACDsC,EAAmBtC,KAAKmC,MAAMC,QAAQG,OAAQ,SAACC,GACnD,OAAOA,EAAO9B,KAAK+B,cAAcC,SAASL,EAAKF,MAAMH,YAAYS,iBAGnE,OACEhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACgD,EAAD,CAAWzC,UAAWF,KAAK6B,iBAC3BpC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiD,EAAD,CAAU3B,UAAWqB,YAxBXnC,IAAMC,WCMJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7855d5ac.chunk.js","sourcesContent":["import React from 'react';\n\nclass SearchBox extends React.Component{\n    render(){\n        return (\n            <div className=\"pa2\">\n                <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Search for robots here\"\n                 onChange={this.props.eventFunc}></input>\n            </div>\n            \n        )\n    }\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\nimport './Card.css';\n\nclass Card extends Component {\n    render(){\n        return (\n            <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n                <img alt=\"Profile pic\" src={`https://robohash.org/${this.props.id}lulzaodob`}></img>\n                <div>\n                    <h2>{this.props.name}</h2>\n                    <h2>{this.props.email}</h2>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js';\n\nclass CardList extends React.Component{\n    \n    createCard(user){\n        return <Card key={user.id} id={user.id} name={user.name} email={user.email}/>;\n    }\n\n    render(){\n        const cardArray = this.props.arrayObjs.map(this.createCard);\n                \n        return (<div>\n                    {cardArray}\n                </div>);\n    }\n}\n\nexport default CardList;","const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n\nexport default robots;","import React from 'react';\nimport './App.css';\nimport SearchBox from './SearchBox.js';\nimport CardList from './CardList.js';\nimport robots from './robots.js';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      objList: robots,\n      searchField: ''\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n\n  }\n\n  render() {\n    const filteredElements = this.state.objList.filter( (string) => {\n      return string.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    });\n\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">Robofriends</h1>\n        <SearchBox eventFunc={this.onSearchChange}/>\n        <hr/>\n        <CardList arrayObjs={filteredElements}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}