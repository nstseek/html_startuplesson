{"version":3,"sources":["components/Card.tsx","mockValues.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Status","StatusColor","Beers","Card","props","filler","status","percentage","tempThreshold","statusColor","boxShadow","evaluateFillerLength","tempPercent","temperature","tempRange","min","max","red","blue","OK","green","thresholdRange","fillerPercent","this","className","style","title","backgroundColor","toFixed","width","React","Component","ipa","lager","paleAle","pilsner","stout","wheatBeer","tempStatus","MockValues","signal","temps","generateValue","key","halfRange","temp","Math","abs","Cold","Hot","recoverValue","generateNormalValue","infiniteLoop","Object","keys","forEach","assign","random","delay","Promise","resolve","setTimeout","server","App","mocker","updateMockTemps","setState","previousState","fetchTemps","a","fetch","response","json","state","icon","faCloud","faBeer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4e50ee6.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.scss';\n\ninterface Props {\n    title: string;\n    temperature: number;\n    tempRange: {\n        max: number;\n        min: number;\n    };\n}\n\ninterface TempRange {\n    min: number;\n    max: number;\n}\n\nenum Status {\n    OK = 0,\n    'Too hot',\n    'Too cold'\n}\n\nenum StatusColor {\n    green = '#00d162',\n    blue = '#0000ff',\n    red = '#ff005e'\n}\n\nexport default class Card extends React.Component<Props> {\n    filler: number;\n    status: Status;\n    percentage: number;\n    tempThreshold: TempRange;\n    statusColor: string;\n    boxShadow: string;\n\n    constructor(props: Props) {\n        super(props);\n        this.boxShadow = `0px 0px 15px 1px ${StatusColor.green}`;\n        this.filler = 50;\n        this.percentage = 100 - this.filler;\n        this.status = Status.OK;\n        this.statusColor = StatusColor.green;\n        this.tempThreshold = {\n            max: this.props.tempRange.max + (this.props.tempRange.max - this.props.tempRange.min),\n            min: this.props.tempRange.min - (this.props.tempRange.max - this.props.tempRange.min)\n        };\n        this.evaluateFillerLength();\n    }\n\n    render() {\n        this.evaluateFillerLength();\n        return (\n            <div className='card-container' style={{ boxShadow: this.boxShadow }}>\n                <div className='card-header'>\n                    <span>{this.props.title}</span>\n                </div>\n                <div className='gold-separator' />\n                <div className='card-data'>\n                    <div className='card-temperature'>\n                        <div className='temperature-title'>\n                            <span>Status: </span>\n                            <div>\n                                <span>{Status[this.status]}</span>\n                                <div className='status-circle' style={{ backgroundColor: this.statusColor }}></div>\n                            </div>\n                        </div>\n                        <div className='temperature-title'>\n                            <span>Temperature: </span>\n                            <span>\n                                {this.props.temperature.toFixed(3)}Â°C ({this.percentage.toFixed(1)}%)\n                            </span>\n                        </div>\n                        <div className='temperature-bar'>\n                            <div className='temperature-filler' style={{ width: `${this.filler.toFixed(0)}%` }} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    evaluateFillerLength = () => {\n        const tempAboveMinimum = this.props.temperature - this.props.tempRange.min;\n        const tempRange = this.props.tempRange.max - this.props.tempRange.min;\n        const tempPercent = (tempAboveMinimum / tempRange) * 100;\n        this.percentage = tempPercent;\n        if (this.props.temperature > this.props.tempRange.max) {\n            this.status = Status['Too hot'];\n            this.boxShadow = `0px 0px 15px 1px ${StatusColor.red}`;\n        } else if (this.props.temperature < this.props.tempRange.min) {\n            this.status = Status['Too cold'];\n            this.boxShadow = `0px 0px 15px 1px ${StatusColor.blue}`;\n        } else {\n            this.status = Status.OK;\n            this.boxShadow = `0px 0px 15px 1px ${StatusColor.green}`;\n        }\n        if (this.props.temperature >= this.tempThreshold.max) {\n            this.filler = 0;\n        } else if (this.props.temperature <= this.tempThreshold.min) {\n            this.filler = 99;\n            this.status = Status['Too cold'];\n        } else {\n            const thresholdRange = this.tempThreshold.max - this.tempThreshold.min;\n            const thresholdTemp = this.props.temperature - this.tempThreshold.min;\n            const fillerPercent = (thresholdTemp / thresholdRange) * 100;\n            this.filler = 100 - fillerPercent;\n        }\n        switch (this.status) {\n            case Status.OK:\n                this.statusColor = StatusColor.green;\n                break;\n            case Status['Too cold']:\n                this.statusColor = StatusColor.blue;\n                break;\n            case Status['Too hot']:\n                this.statusColor = StatusColor.red;\n                break;\n            default:\n                this.statusColor = StatusColor.green;\n        }\n    };\n}\n","type TempRanges = {\n    [id in Beers]: {\n        max: number;\n        min: number;\n    };\n};\n\ntype BeerStatus = {\n    [id in Beers]: Status;\n};\n\ntype Temps = {\n    [id in Beers]: number;\n};\n\nenum Status {\n    OK = 0,\n    Cold,\n    Hot\n}\n\nenum Beers {\n    IPA = 'ipa',\n    Lager = 'lager',\n    'Pale Ale' = 'paleAle',\n    Pilsner = 'pilsner',\n    Stout = 'stout',\n    'Wheat beer' = 'wheatBeer'\n}\n\nconst tempRange: TempRanges = {\n    ipa: {\n        max: 6,\n        min: 5\n    },\n    lager: {\n        max: 7,\n        min: 4\n    },\n    paleAle: {\n        max: 6,\n        min: 4\n    },\n    pilsner: {\n        max: 6,\n        min: 4\n    },\n    stout: {\n        max: 8,\n        min: 6\n    },\n    wheatBeer: {\n        max: 5,\n        min: 3\n    }\n};\n\nconst tempStatus: BeerStatus = {\n    ipa: Status.OK,\n    lager: Status.OK,\n    paleAle: Status.OK,\n    pilsner: Status.OK,\n    stout: Status.OK,\n    wheatBeer: Status.OK\n};\n\nconst maxJump: number = 0.6;\n\nconst criticalValue: number = 1.5;\n\nexport interface ValuesGenerator {\n    generateValue(key: Beers): any;\n    infiniteLoop(): Temps;\n    generateNormalValue(key: Beers): any;\n    recoverValue(key: Beers): any;\n    delay(): Promise<any>;\n}\n\nexport class MockValues implements ValuesGenerator {\n    signal: number = 1;\n    temps: Temps;\n\n    constructor() {\n        this.temps = {\n            ipa: (Math.random() * 100) % 10,\n            lager: (Math.random() * 100) % 10,\n            paleAle: (Math.random() * 100) % 10,\n            pilsner: (Math.random() * 100) % 10,\n            stout: (Math.random() * 100) % 10,\n            wheatBeer: (Math.random() * 100) % 10\n        };\n    }\n\n    generateValue = (key: Beers) => {\n        const halfRange = (tempRange[key].max - tempRange[key].min) / 2 + tempRange[key].min;\n        const temp = this.temps[key] - halfRange;\n        if (Math.abs(temp) > criticalValue) {\n            tempStatus[key] = temp < 0 ? Status.Cold : Status.Hot;\n        }\n        if (tempStatus[key] !== Status.OK) {\n            this.recoverValue(key);\n        } else {\n            this.generateNormalValue(key);\n        }\n    };\n\n    infiniteLoop = () => {\n        const keys = Object.keys(this.temps);\n        keys.forEach((key: any) => {\n            this.generateValue(key);\n        });\n        return Object.assign({}, this.temps);\n    };\n\n    generateNormalValue = (key: Beers) => {\n        let random = Math.random() % maxJump;\n        this.signal = this.signal === 1 ? -1 : 1;\n        random = random * this.signal;\n        this.temps[key] = this.temps[key] + random;\n    };\n\n    recoverValue = (key: Beers) => {\n        let random = Math.random() % maxJump;\n        random = random * (tempStatus[key] === Status.Cold ? 1 : -1);\n        this.temps[key] = this.temps[key] + random;\n        const halfRange = (tempRange[key].max - tempRange[key].min) / 2 + tempRange[key].min;\n        const temp = this.temps[key] - halfRange;\n        if (Math.abs(temp) < 0.5) {\n            tempStatus[key] = Status.OK;\n        }\n    };\n\n    delay = () =>\n        new Promise((resolve) => {\n            setTimeout(() => resolve(), 1000);\n        });\n}\n","import { faBeer, faCloud } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport './App.scss';\nimport Card from './components/Card';\nimport * as MockValues from './mockValues';\n\nconst server = 'http://localhost:7000';\n\nconst delay = 1000;\n\ninterface State {\n    temps: {\n        ipa: number;\n        lager: number;\n        paleAle: number;\n        pilsner: number;\n        stout: number;\n        wheatBeer: number;\n    };\n}\n\nexport default class App extends React.Component<any, State> {\n    mocker: MockValues.ValuesGenerator;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            temps: {\n                ipa: 5,\n                lager: 5,\n                paleAle: 5,\n                pilsner: 5,\n                stout: 5,\n                wheatBeer: 5\n            }\n        };\n        this.mocker = new MockValues.MockValues();\n        this.updateMockTemps();\n    }\n\n    render() {\n        return (\n            <div className='app'>\n                <span className='watermark'>\n                    Todos os valores aqui sÃ£o gerados usando Math.random(), o cÃ³digo fonte do backend estÃ¡ disponÃ­vel no\n                    repositÃ³rio desta pÃ¡gina\n                </span>\n                <div className='header-container'>\n                    <div className='icon-container'>\n                        <FontAwesomeIcon icon={faCloud} className='cloud' />\n                        <FontAwesomeIcon icon={faBeer} className='beer' />\n                    </div>\n                    <span className='title'>Beer temperature control system</span>\n                </div>\n                <div className='cards-container'>\n                    <Card title='IPA' temperature={this.state.temps.ipa} tempRange={{ max: 6, min: 5 }} />\n                    <Card title='Lager' temperature={this.state.temps.lager} tempRange={{ max: 7, min: 4 }} />\n                    <Card title='Pale Ale' temperature={this.state.temps.paleAle} tempRange={{ max: 6, min: 4 }} />\n                    <Card title='Pilsner' temperature={this.state.temps.pilsner} tempRange={{ max: 6, min: 4 }} />\n                    <Card title='Stout' temperature={this.state.temps.stout} tempRange={{ max: 8, min: 6 }} />\n                    <Card title='Wheat beer' temperature={this.state.temps.wheatBeer} tempRange={{ max: 5, min: 3 }} />\n                </div>\n            </div>\n        );\n    }\n\n    updateMockTemps = () => {\n        const temps = this.mocker.infiniteLoop();\n        this.setState((previousState: State) => ({\n            ...previousState,\n            temps\n        }));\n        setTimeout(this.updateMockTemps, 1000);\n    };\n\n    fetchTemps = async () => {\n        const response = await fetch(`${server}/temps`);\n        const temps = await response.json();\n        this.setState((previousState: State) => ({ ...previousState, temps }));\n        setTimeout(this.fetchTemps, delay);\n    };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}