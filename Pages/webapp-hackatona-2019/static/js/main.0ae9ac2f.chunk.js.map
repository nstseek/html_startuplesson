{"version":3,"sources":["types.tsx","routes.tsx","components/header/Header.tsx","components/marker/Marker.tsx","components/map/Map.tsx","components/input-card/InputCard.tsx","components/info-card/InfoCard.tsx","App.tsx","serviceWorker.ts","index.tsx","Logo.png"],"names":["loadingIcon","className","icon","faSpinner","LocationIqURI","search","encodeURIComponent","url","epidemiasRoute","epidemiasArea","lat","lng","getDoencas","cadastraMedico","enviaDadosInputcard","Header","props","updateAddressList","a","state","fieldEdited","fetch","enderecoField","response","json","error","sugestoesArray","forEach","item","push","display_name","setState","enderecosCorrespondentes","sugestoes","setTimeout","reason","selected","find","value","enderecoSelecionado","autosuggestThemeLocal","suggestionsContainer","setMapCoords","mapCoords","lon","length","updateSenha","senha","usuario","updateNome","nome","updateCREMERS","CREMERS","cadastrar","isLoading","routes","method","headers","body","JSON","stringify","medico","id","cremers","closeModal","setSearchField","event","searchField","target","Number","openModal","isModalOpen","input","container","suggestion","headerInput","document","querySelector","this","att","createAttribute","setAttributeNode","src","logo","alwaysRenderSuggestions","suggestions","onSuggestionsFetchRequested","getSuggestionValue","data","renderSuggestion","inputProps","onChange","theme","onClick","faSearch","Modal","aria-labelledby","aria-describedby","open","onClose","Input","placeholder","type","React","Component","Marker","radius","style","width","height","display","alignItems","justifyContent","borderRadius","backgroundColor","opacity","transform","margin","fontSize","color","text","TipoUsuario","mapsKey","key","language","region","Map","mapDidMove","tempData","componentDidMount","getEpidemias","translateId","doenca","doencas","tipoDoenca","idDoenca","updateLatLng","console","log","then","epidemias","setDoencasEpidemias","MarkersEpidemias","map","Math","random","MarkersDoencas","loadingComponent","bootstrapURLKeys","defaultZoom","defaultCenter","center","onDrag","InputCard","sendData","tipoUsuario","MEDICO","id_org","numeroEpidemia","doencasData","doencaSelecionada","OMS","threshold","Error","getSugestoesDoenca","doencasField","autosuggestTheme","arraySugestoes","filter","indexOf","arrayDoencas","setTipoDoenca","updateThreshold","updateUser","user","fieldsComponent","authComponent","updateId","closed","inputDoenca","inputLocal","attDoenca","attLocal","faArrowRight","faArrowLeft","Radio","checked","InfoCard","updateDoencas","doencasArea","isEpidemia","quantidade","startingPointMap","App","doencasEpidemias","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"6SAIaA,G,MACT,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,0BACX,kBAAC,IAAD,CACIC,KAAMC,IACNF,UAAU,4BAObG,EAAgB,SAACC,GAAD,6DACuBC,mBAF1B,kBACG,cAGlBA,mBAAmBD,GAHD,kCChBhBE,EAAM,+BACNC,EAAiBD,EAAM,aACvBE,EAAgB,SAACC,EAAaC,GAAd,OACzBJ,EAAG,yBAAqBG,EAArB,YAA4BC,IACtBC,EAAaL,EAAM,WACnBM,EAAiBN,EAAM,mBACvBO,EAAsBP,EAAM,U,+lBC6BpBQ,E,YACjB,WAAYC,GAAa,IAAD,8BACpB,4CAAMA,KAyHVC,kBA1HwB,sBA0HJ,8BAAAC,EAAA,0DACZ,EAAKC,MAAMC,YADC,gCAEcC,MAAM,GAAD,OACxBjB,EAAc,EAAKe,MAAMG,iBAHpB,cAERC,EAFQ,gBAKKA,EAASC,OALd,QAKZD,EALY,QAMEE,QACNC,EAA2B,GAC/BH,EAASI,SAAQ,SAACC,GACdF,EAAeG,KAAKD,EAAKE,iBAE7B,EAAKC,SAAL,KACO,EAAKZ,MADZ,CAEIa,yBAA0BT,EAC1BH,aAAa,EACba,UAAWP,MAfP,OAmBhBQ,WAAW,EAAKjB,kBAAmB,KAnBnB,2CA1HI,EAgJxBG,YAAc,SAACf,GACX,GAAIA,GAA4B,wBAAlBA,EAAO8B,OAAkC,CACnD,IAAMC,EAAgB,EAAKjB,MAAMa,yBAAyBK,MACtD,SAACT,GAAD,QACOvB,EAAOiC,QAAUV,EAAKE,iBAEjC,EAAKC,SAAL,KACO,EAAKZ,MADZ,CAEIG,cAAejB,EAAOiC,MACtBC,oBAAqBH,EACrBhB,aAAa,EACboB,sBAAsB,EAAD,GACd,EAAKrB,MAAMqB,sBADG,CAEjBC,qBAAsB,0CAG9B,EAAKzB,MAAM0B,aAAa,CACpBC,UAAW,CACPjC,IAAK0B,EAAS1B,IACdC,IAAKyB,EAASQ,YAItBvC,GACAA,EAAOiC,OACPjC,EAAOiC,MAAMO,OAAS,IACJ,kBAAlBxC,EAAO8B,OAEP,EAAKJ,SAAL,KACO,EAAKZ,MADZ,CAEIG,cAAejB,EAAOiC,MACtBlB,aAAa,EACboB,sBAAsB,EAAD,GACd,EAAKrB,MAAMqB,sBADG,CAEjBC,qBAAsB,qCAGvBpC,EAAOiC,OAASjC,EAAOiC,MAAMO,QAAU,GAC9C,EAAKd,SAAL,KACO,EAAKZ,MADZ,CAEIG,cAAejB,EAAOiC,MACtBL,UAAW,GACXO,sBAAsB,EAAD,GACd,EAAKrB,MAAMqB,sBADG,CAEjBC,qBAAsB,0CAGtBpC,EAAOiC,OAA2B,kBAAlBjC,EAAO8B,OAUxB9B,GAAUA,EAAOiC,OACxB,EAAKP,SAAL,KACO,EAAKZ,MADZ,CAEIG,cAAejB,EAAOiC,SAZ1B,EAAKP,SAAL,KACO,EAAKZ,MADZ,CAEIG,cAAe,GACfW,UAAW,GACXO,sBAAsB,EAAD,GACd,EAAKrB,MAAMqB,sBADG,CAEjBC,qBAAsB,2CAtMd,EAiNxBK,YAAc,SAACC,GACX,EAAKhB,SAAL,KACO,EAAKZ,MADZ,CAEI6B,QAAQ,EAAD,GACA,EAAK7B,MAAM6B,QADX,CAEHD,cAtNY,EA2NxBE,WAAa,SAACC,GACV,EAAKnB,SAAL,KACO,EAAKZ,MADZ,CAEI6B,QAAQ,EAAD,GACA,EAAK7B,MAAM6B,QADX,CAEHE,aAhOY,EAqOxBC,cAAgB,SAACC,GACb,EAAKrB,SAAL,KACO,EAAKZ,MADZ,CAEI6B,QAAQ,EAAD,GACA,EAAK7B,MAAM6B,QADX,CAEHI,gBA1OY,EA+OxBC,UA/OwB,sBA+OZ,sBAAAnC,EAAA,6DACR,EAAKa,SAAL,KACO,EAAKZ,MADZ,CAEImC,WAAW,KAHP,SAKFjC,MAAMkC,EAAuB,CAC/BC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBC,OAAQ,CACJC,GAAI,KACJC,QAAS,EAAK5C,MAAM6B,QAAQI,QAC5BF,KAAM,EAAK/B,MAAM6B,QAAQE,KACzBH,MAAO,EAAK5B,MAAM6B,QAAQD,WAb9B,OAiBR,EAAKhB,SAAL,KACO,EAAKZ,MADZ,CAEImC,WAAW,KAEf,EAAKU,aArBG,2CA/OY,EAuQxBC,eAAiB,SAACC,GACd,EAAKnC,SAAL,KACO,EAAKZ,MADZ,CAEIgD,YAAaD,EAAME,OAAO9B,UA1QV,EA8QxBjC,OAAS,WACL,EAAKW,MAAM0B,aAAa,CACpBC,UAAW,CACPjC,IAAK2D,OAAO,EAAKlD,MAAMoB,oBAAoB7B,KAC3CC,IAAK0D,OAAO,EAAKlD,MAAMoB,oBAAoBK,SAlR/B,EAuRxB0B,UAAY,WACR,EAAKvC,SAAL,KACO,EAAKZ,MADZ,CAEIoD,aAAa,MA1RG,EA8RxBP,WAAa,WACT,EAAKjC,SAAL,KACO,EAAKZ,MADZ,CAEIoD,aAAa,MA/RjB,EAAKpD,MAAQ,CACTgD,YAAa,GACbI,aAAa,EACbjB,WAAW,EACXN,QAAS,CAAEE,KAAM,GAAIE,QAAS,GAAIL,MAAO,IACzC3B,aAAa,EACbE,cAAe,GACfU,yBAA0B,GAC1BO,oBAAqB,KACrBN,UAAW,GACXO,sBAAuB,CACnBgC,MAAO,2BACPC,UAAW,wBACXhC,qBAAsB,qCACtBiC,WAAY,2BAGpB,EAAKzD,oBAnBe,E,iFAuBpB,IAAM0D,EAAcC,SAASC,cACzB,IAAMC,KAAK3D,MAAMqB,sBAAsBgC,OAErCO,EAAMH,SAASI,gBAAgB,eACrCD,EAAIzC,MAAQ,wBACRqC,GACAA,EAAYM,iBAAiBF,K,+BAI3B,IAAD,OACL,OACI,yBAAK9E,UAAU,UACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,OAAOiF,IAAKC,MAC3B,0BAAMlF,UAAU,SAAhB,UAEJ,yBAAKA,UAAU,wBACX,kBAAC,IAAD,CACImF,yBAAyB,EACzBC,YAAaP,KAAK3D,MAAMc,UACxBqD,4BAA6BR,KAAK1D,YAClCmE,mBAAoB,SAACC,GAAD,OAAkBA,GACtCC,iBAAkB,SAACD,GAAD,OAAe,8BAAOA,IACxCE,WAAY,CACRpD,MAAOwC,KAAK3D,MAAMG,cAClBqE,SAAUb,KAAK1D,aAEnB0C,GAAI,IACJ8B,MAAOd,KAAK3D,MAAMqB,wBAEtB,yBAAKqD,QAASf,KAAKzE,OAAQJ,UAAU,kBACjC,kBAAC,IAAD,CACIC,KAAM4F,IACN7F,UAAU,uBAItB,yBAAKA,UAAU,mBACX,4BAAQA,UAAU,eAAe4F,QAASf,KAAKR,WAA/C,uCAGA,kBAACyB,EAAA,EAAD,CACIC,kBAAgB,QAChBC,mBAAiB,0BACjBC,KAAMpB,KAAK3D,MAAMoD,YACjB4B,QAASrB,KAAKd,WACd/D,UAAU,mBACV,yBAAKA,UAAU,cACX,6BACI,iDAEJ,yBAAKA,UAAU,oBACX,yCACA,kBAACmG,EAAA,EAAD,CACIC,YAAY,uCACZV,SAAU,SAACzB,GAAD,OACN,EAAKf,cAAce,EAAME,OAAO9B,QAEpCrC,UAAU,UAEd,sCACA,kBAACmG,EAAA,EAAD,CACIC,YAAY,kBACZV,SAAU,SAACzB,GAAD,OACN,EAAKjB,WAAWiB,EAAME,OAAO9B,QAEjCrC,UAAU,UAEd,uCACA,kBAACmG,EAAA,EAAD,CACInG,UAAU,QACVoG,YAAY,iBACZV,SAAU,SAACzB,GAAD,OACN,EAAKpB,YAAYoB,EAAME,OAAO9B,QAElCgE,KAAK,cAGZxB,KAAK3D,MAAMmC,UACR,kBAAC,IAAD,CACIpD,KAAMC,IACNF,UAAU,gCAGd,GAEJ,4BACIA,UAAU,gCACV4F,QAASf,KAAKzB,WAFlB,qB,GA/GQkD,IAAMC,W,iBCrBrBC,G,wBACjB,WAAYzF,GAAqB,IAAD,8BAC5B,4CAAMA,KACEA,MAAM0F,OACV,EAAKvF,MAAQ,CACTuF,OAAQ,EAAK1F,MAAM0F,OAAO,EAAK1F,MAAM0F,QAIzC,EAAKvF,MAAQ,CACTuF,OAAQ,IATY,E,sEAe5B,OACI,yBACIC,MAAO,CACHC,MAAO,GACPC,OAAQ,GACRC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,aAAc,EACdC,gBAAiB,MACjBC,QAAS,GACTC,UAAU,SAAD,OAAWtC,KAAK9D,MAAM0F,OAAtB,OAGb,0BAAMC,MAAO,CAACU,OAAQ,EAAGC,SAAU,IAAKC,MAAO,UAAWzC,KAAK9D,MAAMwG,W,GA9BjDjB,IAAMC,Y,yjBCN1C,ICCKiB,EDDCC,EAAU,CACZC,IAAI,0CACJC,SAAU,KACVC,OAAQ,MA2BSC,E,YAMjB,WAAY9G,GAAa,IAAD,8BACpB,4CAAMA,KANVN,SAKwB,IAJxBC,SAIwB,IAHxBoH,gBAGwB,IAFxBC,cAEwB,IAcxBC,kBAAoB,WAChB,EAAKC,gBAfe,EA8DxBC,YAAc,SAACC,GAEX,OADe,EAAKpH,MAAMqH,QAAQhG,MAAK,SAACiG,GAAD,OAA4BF,EAAOtE,KAAOwE,EAAWC,YAC9ErF,MAhEM,EAmExBsF,aAAe,SAAC9H,EAAaC,GACzB,EAAKD,IAAMA,EACX,EAAKC,IAAMA,EACX,EAAKoH,YAAa,EAClB,EAAKhG,SAAL,KACO,EAAKZ,MADZ,CAEIT,IAAK,EAAKA,IACVC,IAAK,EAAKA,QA1EM,EA8ExBuH,aAAe,WACP,EAAKH,aACLU,QAAQC,IAAI,mBACZD,QAAQC,IAAI,EAAKhI,IAAK,EAAKC,KAC3B,EAAKK,MAAM0B,aAAa,CACpBC,UAAW,CAAEjC,IAAK,EAAKA,IAAKC,IAAK,EAAKA,OAE1CU,MAAMkC,GACDoF,MAAK,SAACnD,GAAD,OAAUA,EAAKhE,UACpBmH,MAAK,SAACC,GACHH,QAAQC,IAAIE,GACZ,EAAK5H,MAAM6H,oBAAoBD,GAC/B,EAAK7G,SAAL,KACO,EAAKZ,MADZ,CAEIyH,mBAIhB1G,WAAW,EAAKgG,aAAc,MA9F9B,EAAKxH,IAAM,EAAKM,MAAM2B,UAAUjC,IAChC,EAAKC,IAAM,EAAKK,MAAM2B,UAAUhC,IAChC,EAAKoH,YAAa,EAClB,EAAK5G,MAAQ,CACTyH,UAAW,GACXP,QAAS,GACT/E,WAAW,EACX5C,IAAK,EAAKA,IACVC,IAAK,EAAKA,KAVM,E,sEAkBd,IAAD,OACCmI,EAAmBhE,KAAK3D,MAAMyH,UAAUG,KAC1C,SAACnH,GAAD,OACI,kBAAC,EAAD,CACIlB,IAAKkB,EAAKlB,IACVC,IAAKiB,EAAKjB,IACV6G,KAAM,EAAKW,YAAYvG,GACvB8E,OAAQ,GAAKsC,KAAKC,cAIxBC,EAAiBpE,KAAK3D,MAAMkH,QAAQU,KACtC,SAACnH,GAAD,OACI,kBAAC,EAAD,CACIlB,IAAKkB,EAAKlB,IACVC,IAAKiB,EAAKjB,IACV6G,KAAM,EAAKW,YAAYvG,GACvB8E,OAAQ,OAKdyC,EAAmBrE,KAAK3D,MAAMmC,UAAYtD,EAAc,GAC9D,OACI,yBAAK2G,MAAO,CAAEE,OAAQ,OAAQD,MAAO,SACjC,kBAAC,IAAD,CACIwC,iBAAkB1B,EAClB2B,YAAa,GACbC,cAAe,CAAE5I,IAAKoE,KAAKpE,IAAKC,IAAKmE,KAAKnE,KAC1C4I,OAAQ,CACJ7I,IAAKoE,KAAK9D,MAAM2B,UAAUjC,IAC1BC,IAAKmE,KAAK9D,MAAM2B,UAAUhC,KAE9B6I,OAAQ,SAACT,GACL,EAAKP,aAAaO,EAAIQ,OAAO7I,MAAOqI,EAAIQ,OAAO5I,SAElDuI,EACAJ,GAEJK,O,GA/DgB5C,IAAMC,W,olBC7BlCiB,O,mBAAAA,I,cAAAA,M,SAsCgBgC,E,YAIjB,WAAYzI,GAAa,IAAD,8BACpB,4CAAMA,KA+KV0I,SAAW,WACP,OAAQ,EAAKvI,MAAMwI,aACf,KAAKlC,EAAYmC,OACbnB,QAAQC,IACJ/E,KAAKC,UAAU,CACXG,QAAS,EAAK5C,MAAMiC,QACpByG,OAAQ,KACRC,eAAgB,KAChB/G,MAAO,EAAK5B,MAAM4B,MAClBwF,SAAU,EAAKpH,MAAM4I,YAAYC,kBAC5BzB,SACL7H,IAAK,EAAKS,MAAMoB,oBAAoB7B,IACpCC,IAAK,EAAKQ,MAAMoB,oBAAoBK,OAG5CvB,MAAMkC,EAA4B,CAC9BC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBG,QAAS,EAAK5C,MAAMiC,QACpByG,OAAQ,KACRC,eAAgB,KAChB/G,MAAO,EAAK5B,MAAM4B,MAClBwF,SAAU,EAAKpH,MAAM4I,YAAYC,kBAC5BzB,SACL7H,IAAK,EAAKS,MAAMoB,oBAAoB7B,IACpCC,IAAK,EAAKQ,MAAMoB,oBAAoBK,QAG5C,MACJ,KAAK6E,EAAYwC,IACbxB,QAAQC,IACJ/E,KAAKC,UAAU,CACXG,QAAS,KACT8F,OAAQ,EAAK1I,MAAM2C,GACnBgG,eAAgBzF,OAAO,EAAKlD,MAAM+I,WAClCnH,MAAO,EAAK5B,MAAM4B,MAClBwF,SAAU,EAAKpH,MAAM4I,YAAYC,kBAC5BzB,SACL7H,IAAK,KACLC,IAAK,QAGbU,MAAMkC,EAA4B,CAC9BC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACjBG,QAAS,KACT8F,OAAQ,EAAK1I,MAAM2C,GACnBgG,eAAgBzF,OAAO,EAAKlD,MAAM+I,WAClCnH,MAAO,EAAK5B,MAAM4B,MAClBwF,SAAU,EAAKpH,MAAM4I,YAAYC,kBAC5BzB,SACL7H,IAAK,KACLC,IAAK,SAGb,MACJ,QACI,MAAM,IAAIwJ,MAAM,sBA3OJ,EA+OxBC,mBAAqB,SAAC/J,GAClB,GACsB,kBAAlBA,EAAO8B,QACL9B,EAAOiC,OAAiC,IAAxBjC,EAAOiC,MAAMO,QAe5B,IACFxC,EAAOiC,OACPjC,EAAOiC,OAAiC,IAAxBjC,EAAOiC,MAAMO,OAE9B,EAAKd,SAAL,KACO,EAAKZ,MADZ,CAEI4I,YAAY,KACL,EAAK5I,MAAM4I,YADP,CAEP9H,UAAW,GACXoI,aAAchK,EAAOiC,gBAG1B,GAAsB,wBAAlBjC,EAAO8B,OACd,EAAKJ,SAAL,KACO,EAAKZ,MADZ,CAEI4I,YAAY,KACL,EAAK5I,MAAM4I,YADP,CAEP9H,UAAW,GACXoI,aAAchK,EAAOiC,MACrB0H,kBAAmB,EAAK7I,MAAM4I,YAAY1B,QAAQhG,MAC9C,SAACT,GAAD,QACOA,EAAKsB,OAAS7C,EAAOiC,UAEhCgI,iBAAiB,KACV,EAAKnJ,MAAM4I,YAAYO,iBADd,CAEZ7H,qBACI,iDAIb,GAAsB,kBAAlBpC,EAAO8B,OAA4B,CAC1C,IAAIoI,EAAsB,EAAKpJ,MAAM4I,YAAY1B,QAAQmC,QACrD,SAAC5I,GAAD,OAA2D,IAArCA,EAAKsB,KAAKuH,QAAQpK,EAAOiC,UAEnDiI,EAAiBA,EAAexB,KAC5B,SAACnH,GAAD,OAAsBA,EAAKsB,QAE/B,EAAKnB,SAAL,KACO,EAAKZ,MADZ,CAEI4I,YAAY,KACL,EAAK5I,MAAM4I,YADP,CAEP9H,UAAWsI,EACXF,aAAchK,EAAOiC,MACrBgI,iBAAiB,KACV,EAAKnJ,MAAM4I,YAAYO,iBADd,CAEZ7H,qBAAsB,6CA1DlC,EAAKV,SAAL,KACO,EAAKZ,MADZ,CAEI4I,YAAY,KACL,EAAK5I,MAAM4I,YADP,CAEP9H,UAAW,GACXoI,aAAchK,EAAOiC,MACrBgI,iBAAiB,KACV,EAAKnJ,MAAM4I,YAAYO,iBADd,CAEZ7H,qBACI,6CA7PA,EAqTxB7B,WAAa,WACTS,MAAMkC,GACDoF,MAAK,SAACnD,GAAD,OAAUA,EAAKhE,UACpBmH,MAAK,SAAC+B,GACH,EAAK1J,MAAM2J,cAAcD,GACzB,EAAK3I,SAAL,KACO,EAAKZ,MADZ,CAEI4I,YAAY,KACL,EAAK5I,MAAM4I,YADP,CAEP1B,QAASqC,EACTzI,UAAWyI,EAAa3B,KACpB,SAACnH,GAAD,OAAsBA,EAAKsB,iBAhU3B,EAuUxB0H,gBAAkB,SAACV,GACf,EAAKnI,SAAL,KACO,EAAKZ,MADZ,CAEI+I,gBA1UgB,EA8UxBW,WAAa,SAACC,GACV,EAAK/I,SAAL,KACO,EAAKZ,MADZ,CAEIwI,YAAamB,MAjVG,EAqVxBC,gBAAkB,WACd,OAAQ,EAAK5J,MAAMwI,aACf,KAAKlC,EAAYmC,OACb,MAAO,GACX,KAAKnC,EAAYwC,IACb,OACI,yBAAKhK,UAAU,oBACX,oDACA,kBAACmG,EAAA,EAAD,CACIC,YAAY,0DACZV,SAAU,SAACzB,GAAD,OACN,EAAK0G,gBAAgB1G,EAAME,OAAO9B,QAEtCrC,UAAU,iBAI1B,QACI,MAAM,IAAIkK,MAAM,sBAvWJ,EA2WxBa,cAAgB,WACZ,OAAQ,EAAK7J,MAAMwI,aACf,KAAKlC,EAAYmC,OACb,OACI,yBAAK3J,UAAU,qCACX,yCACA,kBAACmG,EAAA,EAAD,CACIC,YAAY,8CACZV,SAAU,EAAKxC,cACflD,UAAU,eAEd,uCACA,kBAACmG,EAAA,EAAD,CACIC,YAAY,mBACZV,SAAU,EAAK7C,YACf7C,UAAU,aACVqG,KAAK,cAIrB,KAAKmB,EAAYwC,IACb,OACI,yBAAKhK,UAAU,qCACX,oCACA,kBAACmG,EAAA,EAAD,CACIC,YAAY,qCACZV,SAAU,EAAKsF,SACfhL,UAAU,eAEd,uCACA,kBAACmG,EAAA,EAAD,CACIC,YAAY,mBACZV,SAAU,EAAK7C,YACf7C,UAAU,gBAI1B,QACI,MAAM,IAAIkK,MAAM,sBAjZJ,EAqZxBrH,YAAc,SAACoB,GACX,EAAKnC,SAAL,KACO,EAAKZ,MADZ,CAEI4B,MAAOmB,EAAME,OAAO9B,UAxZJ,EA4ZxB2I,SAAW,SAAC/G,GACR,EAAKnC,SAAL,KACO,EAAKZ,MADZ,CAEI2C,GAAII,EAAME,OAAO9B,UA/ZD,EAmaxBa,cAAgB,SAACe,GACb,EAAKnC,SAAL,KACO,EAAKZ,MADZ,CAEIiC,QAASc,EAAME,OAAO9B,UAtaN,EA0axBlB,YAAc,SAACf,GACX,GAAIA,GAA4B,wBAAlBA,EAAO8B,OAAkC,CACnD,IAAMC,EAAgB,EAAKjB,MAAMa,yBAAyBK,MACtD,SAACT,GAAD,QACOvB,EAAOiC,QAAUV,EAAKE,iBAEjC,EAAKC,SAAL,KACO,EAAKZ,MADZ,CAEIG,cAAejB,EAAOiC,MACtBC,oBAAqBH,EACrBhB,aAAa,EACboB,sBAAsB,KACf,EAAKrB,MAAMqB,sBADG,CAEjBC,qBAAsB,+CAI9BpC,GACAA,EAAOiC,OACPjC,EAAOiC,MAAMO,OAAS,IACJ,kBAAlBxC,EAAO8B,OAEP,EAAKJ,SAAL,KACO,EAAKZ,MADZ,CAEIG,cAAejB,EAAOiC,MACtBlB,aAAa,EACboB,sBAAsB,KACf,EAAKrB,MAAMqB,sBADG,CAEjBC,qBAAsB,qCAGvBpC,EAAOiC,OAASjC,EAAOiC,MAAMO,QAAU,GAC9C,EAAKd,SAAL,KACO,EAAKZ,MADZ,CAEIG,cAAejB,EAAOiC,MACtBL,UAAW,GACXO,sBAAsB,KACf,EAAKrB,MAAMqB,sBADG,CAEjBC,qBAAsB,0CAGtBpC,EAAOiC,OAA2B,kBAAlBjC,EAAO8B,OAUxB9B,GAAUA,EAAOiC,OACxB,EAAKP,SAAL,KACO,EAAKZ,MADZ,CAEIG,cAAejB,EAAOiC,SAZ1B,EAAKP,SAAL,KACO,EAAKZ,MADZ,CAEIG,cAAe,GACfW,UAAW,GACXO,sBAAsB,KACf,EAAKrB,MAAMqB,sBADG,CAEjBC,qBAAsB,2CA1dd,EAqexBxB,kBArewB,sBAqeJ,8BAAAC,EAAA,0DACZ,EAAKC,MAAMC,YADC,gCAEcC,MAAM,GAAD,OACxBjB,EAAc,EAAKe,MAAMG,iBAHpB,cAERC,EAFQ,gBAKKA,EAASC,OALd,QAKZD,EALY,QAMEE,QACNC,EAA2B,GAC/BH,EAASI,SAAQ,SAACC,GACdF,EAAeG,KAAKD,EAAKE,iBAE7B,EAAKC,SAAL,KACO,EAAKZ,MADZ,CAEIa,yBAA0BT,EAC1BH,aAAa,EACba,UAAWP,MAfP,OAmBhBQ,WAAW,EAAKjB,kBAAmB,KAnBnB,2CAnehB,EAAKE,MAAQ,CACTC,aAAa,EACbE,cAAe,GACfU,yBAA0B,GAC1BO,oBAAqB,KACrBN,UAAW,GACXO,sBAAuB,CACnBgC,MAAO,sCACPC,UAAW,wBACXhC,qBAAsB,qCACtBiC,WAAY,0BAEhBiF,YAAalC,EAAYmC,OACzB7G,MAAO,GACPe,GAAI,GACJV,QAAS,GACT8H,QAAQ,EACRnB,YAAa,CACTC,kBAAmB,KACnB3B,QAAS,CAAC,CAAEE,SAAU,EAAGrF,KAAM,KAC/BjB,UAAW,GACXoI,aAAc,GACdC,iBAAkB,CACd9F,MAAO,iCACPC,UACI,qDACJhC,qBAAsB,qCACtBiC,WAAY,2BAGpBwF,UAAW,GAEf,EAAKtJ,aACL,EAAKK,oBAnCe,E,iFAuCpB,IAAMkK,EAAcvG,SAASC,cAAc,iBACrCuG,EAAaxG,SAASC,cAAc,sBACpCwG,EAAYzG,SAASI,gBAAgB,eACrCsG,EAAW1G,SAASI,gBAAgB,eAC1CqG,EAAU/I,MAAQ,qCAClBgJ,EAAShJ,MAAQ,+BACb6I,GACAA,EAAYlG,iBAAiBoG,GAE7BD,GACAA,EAAWnG,iBAAiBqG,K,2CAKhC,IAAMH,EAAcvG,SAASC,cAAc,iBACrCuG,EAAaxG,SAASC,cAAc,sBACpCwG,EAAYzG,SAASI,gBAAgB,eACrCsG,EAAW1G,SAASI,gBAAgB,eAC1CqG,EAAU/I,MAAQ,qCAClBgJ,EAAShJ,MAAQ,+BACb6I,GACAA,EAAYlG,iBAAiBoG,GAE7BD,GACAA,EAAWnG,iBAAiBqG,K,+BAI1B,IAAD,OACL,OACI,yBACIrL,UAAS,+BACL6E,KAAK3D,MAAM+J,OAAS,oBAAsB,KAE7CpG,KAAK3D,MAAM+J,OACR,yBACIjL,UAAU,QACV4F,QAAS,kBACL,EAAK9D,SAAL,KACO,EAAKZ,MADZ,CAEI+J,QAAQ,OAGhB,kBAAC,IAAD,CAAiBhL,KAAMqL,OAG3B,yBACItL,UAAU,QACV4F,QAAS,kBACL,EAAK9D,SAAL,KACO,EAAKZ,MADZ,CAEI+J,QAAQ,OAGhB,kBAAC,IAAD,CAAiBhL,KAAMsL,OAG/B,0BAAMvL,UAAU,oBAAhB,8DAGA,yBAAKA,UAAU,eACX,+CACA,yBAAKA,UAAU,0BACX,2CACA,kBAACwL,EAAA,EAAD,CACIxL,UAAU,eACVyL,QACI5G,KAAK3D,MAAMwI,cAAgBlC,EAAYmC,OAE3CjE,SAAU,SAACzB,GACHA,EAAME,OAAOsH,SACb,EAAKb,WAAWpD,EAAYmC,YAK5C,yBAAK3J,UAAU,0BACX,qCACA,kBAACwL,EAAA,EAAD,CACIxL,UAAU,eACVyL,QAAS5G,KAAK3D,MAAMwI,cAAgBlC,EAAYwC,IAChDtE,SAAU,SAACzB,GACHA,EAAME,OAAOsH,SACb,EAAKb,WAAWpD,EAAYwC,SAK3CnF,KAAKkG,gBACLlG,KAAK3D,MAAMwI,cAAgBlC,EAAYmC,OACpC,mDAEA,GAEH9E,KAAK3D,MAAMwI,cAAgBlC,EAAYmC,OACpC,kBAAC,IAAD,CACIxE,yBAAyB,EACzBC,YAAaP,KAAK3D,MAAMc,UACxBqD,4BAA6BR,KAAK1D,YAClCmE,mBAAoB,SAACC,GAAD,OAAkBA,GACtCC,iBAAkB,SAACD,GAAD,OACd,8BAAOA,IAEXE,WAAY,CACRpD,MAAOwC,KAAK3D,MAAMG,cAClBqE,SAAUb,KAAK1D,aAEnB0C,GAAI,IACJ8B,MAAOd,KAAK3D,MAAMqB,wBAGtB,GAEJ,2CACA,kBAAC,IAAD,CACI4C,yBAAyB,EACzBC,YAAaP,KAAK3D,MAAM4I,YAAY9H,UACpCqD,4BAA6BR,KAAKsF,mBAClC7E,mBAAoB,SAACC,GAAD,OAAkBA,GACtCC,iBAAkB,SAACD,GAAD,OAAe,8BAAOA,IACxCE,WAAY,CACRpD,MAAOwC,KAAK3D,MAAM4I,YAAYM,aAC9B1E,SAAUb,KAAKsF,oBAEnBtG,GAAI,IACJ8B,MAAOd,KAAK3D,MAAM4I,YAAYO,mBAEjCxF,KAAKiG,kBACN,4BAAQlF,QAASf,KAAK4E,SAAUzJ,UAAU,eAA1C,gB,GA5KmBsG,IAAMC,W,wOCzBxBmF,E,YAIjB,WAAY3K,GAAuB,IAAD,8BAC9B,4CAAMA,KAsCV4K,cAAgB,WACZnD,QAAQC,IAAI,EAAK1H,MAAM2B,UAAUjC,KACjC+H,QAAQC,IAAI,EAAK1H,MAAM2B,UAAUhC,KACjCU,MACIkC,EACI,EAAKvC,MAAM2B,UAAUjC,IACrB,EAAKM,MAAM2B,UAAUhC,MAGxBgI,MAAK,SAACnD,GAAD,OAAUA,EAAKhE,UACpBmH,MAAK,SAACN,GACHI,QAAQC,IAAIL,GACZ,EAAKtG,S,yVAAL,IAAmB,EAAKZ,MAAxB,CAA+B0K,YAAaxD,QAGpDnG,WAAW,EAAK0J,cAAe,MApD/B,EAAKzK,MAAQ,CACT0K,YAAa,MAEjB,EAAKD,gBALyB,E,sEAQxB,IAAD,OACLnD,QAAQC,IAAI5D,KAAK3D,OAsBjB,OACI,yBAAKlB,UAAU,uBACX,uEACA,wBAAIA,UAAU,SAvBlB,EAAKkB,MAAM0K,YACL,EAAK1K,MAAM0K,YAAY9C,KAAI,SAACnH,GACxB,OACI,wBACI+E,MACI/E,EAAKkK,WACC,CACI5E,gBAAiB,MACjBK,MAAO,SAEX,CACIL,gBAAiB,cACjBK,MAAO,UAGpB3F,EAAKsB,KAZV,MAYmBtB,EAAKmK,WAZxB,eAgBR,S,GAlCoBxF,IAAMC,W,yjBCL5C,IAAMwF,EAAmB,CACrBtL,KAAM,UACNC,KAAM,WAGWsL,E,YACjB,WAAYjL,GAAa,IAAD,8BACpB,4CAAMA,KA2BV2J,cAAgB,SAACtC,GACb,EAAKtG,SAAL,KACO,EAAKZ,MADZ,CAEIkH,cA/BgB,EAmCxBQ,oBAAsB,SAACqD,GACnBzD,QAAQC,IAAIwD,GACZ,EAAKnK,SAAL,KACO,EAAKZ,MADZ,CAEI+K,uBAvCgB,EA2CxBxJ,aAAe,SAACC,GACZ,EAAKZ,SAASY,IA1Cd,EAAKxB,MAAQ,CACTwB,UAAW,CACPjC,IAAKsL,EAAiBtL,IACtBC,IAAKqL,EAAiBrL,KAE1BuL,iBAAkB,KAClB7D,QAAS,MARO,E,sEAapB,OACI,yBAAKpI,UAAU,OACX,kBAAC,EAAD,CAAQyC,aAAcoC,KAAKpC,eAC3B,kBAAC,EAAD,CACIA,aAAcoC,KAAKpC,aACnBC,UAAWmC,KAAK3D,MAAMwB,UACtBkG,oBAAqB/D,KAAK+D,oBAC1BR,QAASvD,KAAK3D,MAAMkH,UAExB,kBAAC,EAAD,CAAWsC,cAAe7F,KAAK6F,gBAC/B,kBAAC,EAAD,CAAUhI,UAAWmC,KAAK3D,MAAMwB,UAAW0F,QAASvD,KAAK3D,MAAMkH,QAAS6D,iBAAkBpH,KAAK3D,MAAM+K,wB,GAxBpF3F,IAAMC,WCVnB2F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7H,SAAS8H,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlE,MAAK,SAAAmE,GACjCA,EAAaC,iB,mBE3InBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.0ae9ac2f.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\n\nexport const loadingIcon = (\n    <div className='loading-fader'>\n        <div className='loading-icon-container'>\n            <FontAwesomeIcon\n                icon={faSpinner}\n                className='loading-icon fa-spin'\n            />\n        </div>\n    </div>\n);\n\nexport const LocationIqKey = `d6514e1895bd6c`;\nexport const LocationIqURI = (search: string) =>\n    `https://us1.locationiq.com/v1/search.php?key=${encodeURIComponent(\n        LocationIqKey\n    )}&q=${encodeURIComponent(search)}&format=json&addressdetails=1`;\n\nexport interface LocationIqResponse {\n    lat: string;\n    lon: string;\n    display_name: string;\n    importante: number;\n    address: {\n        city: string;\n        country: string;\n        neighbourhood: string;\n        postcode: string;\n        road: string;\n        state: string;\n        suburb: string;\n    };\n}\n","export const url = 'http://10.32.223.68:8000/web';\nexport const epidemiasRoute = url + '/epidemias';\nexport const epidemiasArea = (lat: number, lng: number) =>\n    url + `/doencas-coord/${lat}/${lng}`;\nexport const getDoencas = url + '/doencas';\nexport const cadastraMedico = url + '/registra-medico';\nexport const enviaDadosInputcard = url + '/inclui';\nexport const doencasRoute = url + '/doencas2';\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    faHeartbeat,\n    faSearch,\n    faSpinner\n} from '@fortawesome/free-solid-svg-icons';\nimport { Input, Modal } from '@material-ui/core';\nimport './Header.css';\nimport { LocationIqResponse, LocationIqURI } from '../../types';\nimport * as routes from '../../routes';\nimport Autosuggest from 'react-autosuggest';\nimport logo from '../../Logo.png';\n\ninterface HeaderState {\n    searchField: string;\n    isModalOpen: boolean;\n    isLoading: boolean;\n    usuario: {\n        nome: string;\n        CREMERS: string;\n        senha: string;\n    };\n    enderecoField: string;\n    enderecosCorrespondentes: LocationIqResponse[];\n    enderecoSelecionado: LocationIqResponse;\n    fieldEdited: boolean;\n    sugestoes: string[];\n    autosuggestThemeLocal: any;\n}\n\ninterface HeaderProps {\n    setMapCoords(mapCoords: any): any;\n}\n\nexport default class Header extends React.Component<HeaderProps, HeaderState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            searchField: '',\n            isModalOpen: false,\n            isLoading: false,\n            usuario: { nome: '', CREMERS: '', senha: '' },\n            fieldEdited: false,\n            enderecoField: '',\n            enderecosCorrespondentes: [],\n            enderecoSelecionado: null,\n            sugestoes: [],\n            autosuggestThemeLocal: {\n                input: 'autosuggest-input-header',\n                container: 'autosuggest-container',\n                suggestionsContainer: 'autosuggest-suggest-container-hide',\n                suggestion: 'autosuggest-suggestion'\n            }\n        };\n        this.updateAddressList();\n    }\n\n    componentDidMount() {\n        const headerInput = document.querySelector(\n            '.' + this.state.autosuggestThemeLocal.input\n        );\n        const att = document.createAttribute('placeholder');\n        att.value = 'Digite um endereço';\n        if (headerInput) {\n            headerInput.setAttributeNode(att);\n        }\n    }\n\n    render() {\n        return (\n            <nav className='header'>\n                <div className='logo-container'>\n                    <img className='logo' src={logo}/>\n                    <span className='title'>ASMEE</span>\n                </div>\n                <div className='search-bar-container'>\n                    <Autosuggest\n                        alwaysRenderSuggestions={true}\n                        suggestions={this.state.sugestoes}\n                        onSuggestionsFetchRequested={this.fieldEdited}\n                        getSuggestionValue={(data: string) => data}\n                        renderSuggestion={(data: any) => <span>{data}</span>}\n                        inputProps={{\n                            value: this.state.enderecoField,\n                            onChange: this.fieldEdited\n                        }}\n                        id={'1'}\n                        theme={this.state.autosuggestThemeLocal}\n                    />\n                    <div onClick={this.search} className='icon-container'>\n                        <FontAwesomeIcon\n                            icon={faSearch}\n                            className='icon search-icon'\n                        />\n                    </div>\n                </div>\n                <div className='login-container'>\n                    <button className='login-button' onClick={this.openModal}>\n                        Você é médico? Clique aqui\n                    </button>\n                    <Modal\n                        aria-labelledby='Login'\n                        aria-describedby='Login para credenciados'\n                        open={this.state.isModalOpen}\n                        onClose={this.closeModal}\n                        className='modal-container'>\n                        <div className='modal-card'>\n                            <div>\n                                <span>Crie sua conta</span>\n                            </div>\n                            <div className='margin-top-clear'>\n                                <span>CREMERS</span>\n                                <Input\n                                    placeholder='Digite seu número do CREMERS aqui'\n                                    onChange={(event: any) =>\n                                        this.updateCREMERS(event.target.value)\n                                    }\n                                    className='input'\n                                />\n                                <span>Nome</span>\n                                <Input\n                                    placeholder='Digite seu nome'\n                                    onChange={(event: any) =>\n                                        this.updateNome(event.target.value)\n                                    }\n                                    className='input'\n                                />\n                                <span>Senha</span>\n                                <Input\n                                    className='input'\n                                    placeholder='Crie uma senha'\n                                    onChange={(event: any) =>\n                                        this.updateSenha(event.target.value)\n                                    }\n                                    type='password'\n                                />\n                            </div>\n                            {this.state.isLoading ? (\n                                <FontAwesomeIcon\n                                    icon={faSpinner}\n                                    className='loading-icon-signup fa-spin'\n                                />\n                            ) : (\n                                ''\n                            )}\n                            <button\n                                className='modal-button margin-top-clear'\n                                onClick={this.cadastrar}>\n                                Cadastrar\n                            </button>\n                        </div>\n                    </Modal>\n                </div>\n            </nav>\n        );\n    }\n\n    updateAddressList = async () => {\n        if (this.state.fieldEdited) {\n            let response: any = await fetch(\n                `${LocationIqURI(this.state.enderecoField)}`\n            );\n            response = await response.json();\n            if (!response.error) {\n                let sugestoesArray: string[] = [];\n                response.forEach((item: LocationIqResponse) => {\n                    sugestoesArray.push(item.display_name);\n                });\n                this.setState({\n                    ...this.state,\n                    enderecosCorrespondentes: response,\n                    fieldEdited: false,\n                    sugestoes: sugestoesArray\n                });\n            }\n        }\n        setTimeout(this.updateAddressList, 1000);\n    };\n\n    fieldEdited = (search: any) => {\n        if (search && search.reason === 'suggestion-selected') {\n            const selected: any = this.state.enderecosCorrespondentes.find(\n                (item: LocationIqResponse) =>\n                    !!(search.value === item.display_name)\n            );\n            this.setState({\n                ...this.state,\n                enderecoField: search.value,\n                enderecoSelecionado: selected,\n                fieldEdited: false,\n                autosuggestThemeLocal: {\n                    ...this.state.autosuggestThemeLocal,\n                    suggestionsContainer: 'autosuggest-suggest-container-hide'\n                }\n            });\n            this.props.setMapCoords({\n                mapCoords: {\n                    lat: selected.lat,\n                    lng: selected.lon\n                }\n            });\n        } else if (\n            search &&\n            search.value &&\n            search.value.length > 10 &&\n            search.reason === 'input-changed'\n        ) {\n            this.setState({\n                ...this.state,\n                enderecoField: search.value,\n                fieldEdited: true,\n                autosuggestThemeLocal: {\n                    ...this.state.autosuggestThemeLocal,\n                    suggestionsContainer: 'autosuggest-suggest-container'\n                }\n            });\n        } else if (search.value && search.value.length <= 10) {\n            this.setState({\n                ...this.state,\n                enderecoField: search.value,\n                sugestoes: [],\n                autosuggestThemeLocal: {\n                    ...this.state.autosuggestThemeLocal,\n                    suggestionsContainer: 'autosuggest-suggest-container-hide'\n                }\n            });\n        } else if (!search.value && search.reason === 'input-changed') {\n            this.setState({\n                ...this.state,\n                enderecoField: '',\n                sugestoes: [],\n                autosuggestThemeLocal: {\n                    ...this.state.autosuggestThemeLocal,\n                    suggestionsContainer: 'autosuggest-suggest-container-hide'\n                }\n            });\n        } else if (search && search.value) {\n            this.setState({\n                ...this.state,\n                enderecoField: search.value\n            });\n        }\n    };\n\n    updateSenha = (senha: string) => {\n        this.setState({\n            ...this.state,\n            usuario: {\n                ...this.state.usuario,\n                senha\n            }\n        });\n    };\n\n    updateNome = (nome: string) => {\n        this.setState({\n            ...this.state,\n            usuario: {\n                ...this.state.usuario,\n                nome\n            }\n        });\n    };\n\n    updateCREMERS = (CREMERS: string) => {\n        this.setState({\n            ...this.state,\n            usuario: {\n                ...this.state.usuario,\n                CREMERS\n            }\n        });\n    };\n\n    cadastrar = async () => {\n        this.setState({\n            ...this.state,\n            isLoading: true\n        });\n        await fetch(routes.cadastraMedico, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                medico: {\n                    id: null,\n                    cremers: this.state.usuario.CREMERS,\n                    nome: this.state.usuario.nome,\n                    senha: this.state.usuario.senha\n                }\n            })\n        });\n        this.setState({\n            ...this.state,\n            isLoading: false\n        });\n        this.closeModal();\n    };\n\n    setSearchField = (event: any) => {\n        this.setState({\n            ...this.state,\n            searchField: event.target.value\n        });\n    };\n\n    search = () => {\n        this.props.setMapCoords({\n            mapCoords: {\n                lat: Number(this.state.enderecoSelecionado.lat),\n                lng: Number(this.state.enderecoSelecionado.lon)\n            }\n        });\n    };\n\n    openModal = () => {\n        this.setState({\n            ...this.state,\n            isModalOpen: true\n        });\n    };\n\n    closeModal = () => {\n        this.setState({\n            ...this.state,\n            isModalOpen: false\n        });\n    };\n}\n","import React from 'react';\nimport './Marker.css';\n\ninterface MarkerProps {\n    radius?: number;\n    lat: number;\n    lng: number;\n    text: string;\n}\n\ninterface MarkerState {\n    radius: number;\n}\n\nexport default class Marker extends React.Component<MarkerProps, any> {\n    constructor(props: MarkerProps) {\n        super(props);\n        if(this.props.radius) {\n            this.state = {\n                radius: this.props.radius*this.props.radius\n            }\n        }\n        else {\n            this.state = {\n                radius: 5*5\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div\n                style={{\n                    width: 10,\n                    height: 10,\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    borderRadius: 5,\n                    backgroundColor: 'red',\n                    opacity: 0.5,\n                    transform: `scale(${this.props.radius})`\n                }}\n            >\n                <span style={{margin: 0, fontSize: 2.5, color: 'white'}}>{this.props.text}</span>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport './Map.css';\nimport Marker from '../marker/Marker';\nimport * as routes from '../../routes';\nimport { loadingIcon } from '../../types';\nimport { TipoDoenca } from '../input-card/InputCard';\n\nconst mapsKey = {\n    key: `AIzaSyByfiJMAWWpKRXV7rzbVdGpncPEcmHQsbY`,\n    language: 'br',\n    region: 'br'\n};\n\ninterface MapProps {\n    mapCoords: {\n        lat: number;\n        lng: number;\n    };\n    setDoencasEpidemias(doencasEpidemias: EpidemiaDoenca[]): any;\n    setMapCoords(mapCoords: any): any;\n    doencas: TipoDoenca[];\n}\n\ninterface MapState {\n    epidemias: EpidemiaDoenca[];\n    doencas: EpidemiaDoenca[];\n    isLoading: boolean;\n    lat: number;\n    lng: number;\n}\n\nexport interface EpidemiaDoenca {\n    id: number;\n    lat: number;\n    lng: number;\n}\n\nexport default class Map extends React.Component<MapProps, MapState> {\n    lat: number;\n    lng: number;\n    mapDidMove: boolean;\n    tempData: EpidemiaDoenca[];\n\n    constructor(props: any) {\n        super(props);\n        this.lat = this.props.mapCoords.lat;\n        this.lng = this.props.mapCoords.lng;\n        this.mapDidMove = true;\n        this.state = {\n            epidemias: [],\n            doencas: [],\n            isLoading: false,\n            lat: this.lat,\n            lng: this.lng\n        };\n    }\n\n    componentDidMount = () => {\n        this.getEpidemias();\n    };\n\n    render() {\n        const MarkersEpidemias = this.state.epidemias.map(\n            (item: EpidemiaDoenca) => (\n                <Marker\n                    lat={item.lat}\n                    lng={item.lng}\n                    text={this.translateId(item)}\n                    radius={15 + Math.random()}\n                />\n            )\n        );\n        const MarkersDoencas = this.state.doencas.map(\n            (item: EpidemiaDoenca) => (\n                <Marker\n                    lat={item.lat}\n                    lng={item.lng}\n                    text={this.translateId(item)}\n                    radius={1}\n                />\n            )\n        );\n\n        const loadingComponent = this.state.isLoading ? loadingIcon : '';\n        return (\n            <div style={{ height: '90vh', width: '100%' }}>\n                <GoogleMapReact\n                    bootstrapURLKeys={mapsKey}\n                    defaultZoom={15}\n                    defaultCenter={{ lat: this.lat, lng: this.lng }}\n                    center={{\n                        lat: this.props.mapCoords.lat,\n                        lng: this.props.mapCoords.lng\n                    }}\n                    onDrag={(map: any) => {\n                        this.updateLatLng(map.center.lat(), map.center.lng());\n                    }}>\n                    {MarkersDoencas}\n                    {MarkersEpidemias}\n                </GoogleMapReact>\n                {loadingComponent}\n            </div>\n        );\n    }\n\n    translateId = (doenca: EpidemiaDoenca): string => {\n        const result = this.props.doencas.find((tipoDoenca: TipoDoenca) => doenca.id === tipoDoenca.idDoenca);\n        return result.nome;\n    }\n\n    updateLatLng = (lat: number, lng: number) => {\n        this.lat = lat;\n        this.lng = lng;\n        this.mapDidMove = true;\n        this.setState({\n            ...this.state,\n            lat: this.lat,\n            lng: this.lng\n        });\n    };\n\n    getEpidemias = () => {\n        if (this.mapDidMove) {\n            console.log('to no epidemias');\n            console.log(this.lat, this.lng);\n            this.props.setMapCoords({\n                mapCoords: { lat: this.lat, lng: this.lng }\n            });\n            fetch(routes.epidemiasRoute)\n                .then((data) => data.json())\n                .then((epidemias: EpidemiaDoenca[]) => {\n                    console.log(epidemias);\n                    this.props.setDoencasEpidemias(epidemias);\n                    this.setState({\n                        ...this.state,\n                        epidemias\n                    });\n                });\n        }\n        setTimeout(this.getEpidemias, 5000);\n    };\n}\n","import React from 'react';\nimport './InputCard.css';\nimport Autosuggest from 'react-autosuggest';\nimport { Input, Radio } from '@material-ui/core';\nimport { LocationIqResponse, LocationIqURI } from '../../types';\nimport { faArrowLeft, faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as routes from '../../routes';\n\nenum TipoUsuario {\n    MEDICO = 0,\n    OMS\n}\n\ninterface InputCardProps {\n    setTipoDoenca(doencas: TipoDoenca[]): any;\n}\n\ninterface InputCardState {\n    enderecoField: string;\n    enderecosCorrespondentes: LocationIqResponse[];\n    enderecoSelecionado: LocationIqResponse;\n    fieldEdited: boolean;\n    sugestoes: string[];\n    autosuggestThemeLocal: any;\n    tipoUsuario: TipoUsuario;\n    CREMERS: string;\n    id: string;\n    senha: string;\n    closed: boolean;\n    doencasData: DoencasData;\n    threshold: number;\n}\n\ninterface DoencasData {\n    doencas: TipoDoenca[];\n    doencasField: string;\n    sugestoes: string[];\n    doencaSelecionada: TipoDoenca | null | undefined;\n    autosuggestTheme: any;\n}\n\nexport interface TipoDoenca {\n    idDoenca: number;\n    nome: string;\n}\n\nexport default class InputCard extends React.Component<\n    InputCardProps,\n    InputCardState\n> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            fieldEdited: false,\n            enderecoField: '',\n            enderecosCorrespondentes: [],\n            enderecoSelecionado: null,\n            sugestoes: [],\n            autosuggestThemeLocal: {\n                input: 'autosuggest-input localizacao-input',\n                container: 'autosuggest-container',\n                suggestionsContainer: 'autosuggest-suggest-container-hide',\n                suggestion: 'autosuggest-suggestion'\n            },\n            tipoUsuario: TipoUsuario.MEDICO,\n            senha: '',\n            id: '',\n            CREMERS: '',\n            closed: false,\n            doencasData: {\n                doencaSelecionada: null,\n                doencas: [{ idDoenca: 0, nome: '' }],\n                sugestoes: [],\n                doencasField: '',\n                autosuggestTheme: {\n                    input: 'autosuggest-input doenca-input',\n                    container:\n                        'autosuggest-container autosuggest-container-doenca',\n                    suggestionsContainer: 'autosuggest-suggest-container-hide',\n                    suggestion: 'autosuggest-suggestion'\n                }\n            },\n            threshold: 0\n        };\n        this.getDoencas();\n        this.updateAddressList();\n    }\n\n    componentDidMount() {\n        const inputDoenca = document.querySelector('.doenca-input');\n        const inputLocal = document.querySelector('.localizacao-input');\n        const attDoenca = document.createAttribute('placeholder');\n        const attLocal = document.createAttribute('placeholder');\n        attDoenca.value = 'Digite uma doença para cadastro';\n        attLocal.value = 'Digite sua localização';\n        if (inputDoenca) {\n            inputDoenca.setAttributeNode(attDoenca);\n        }\n        if (inputLocal) {\n            inputLocal.setAttributeNode(attLocal);\n        }\n    }\n\n    componentDidUpdate() {\n        const inputDoenca = document.querySelector('.doenca-input');\n        const inputLocal = document.querySelector('.localizacao-input');\n        const attDoenca = document.createAttribute('placeholder');\n        const attLocal = document.createAttribute('placeholder');\n        attDoenca.value = 'Digite uma doença para cadastro';\n        attLocal.value = 'Digite sua localização';\n        if (inputDoenca) {\n            inputDoenca.setAttributeNode(attDoenca);\n        }\n        if (inputLocal) {\n            inputLocal.setAttributeNode(attLocal);\n        }\n    }\n\n    render() {\n        return (\n            <div\n                className={`input-card-container ${\n                    this.state.closed ? 'input-card-hidden' : ''\n                }`}>\n                {this.state.closed ? (\n                    <div\n                        className='arrow'\n                        onClick={() =>\n                            this.setState({\n                                ...this.state,\n                                closed: false\n                            })\n                        }>\n                        <FontAwesomeIcon icon={faArrowRight} />\n                    </div>\n                ) : (\n                    <div\n                        className='arrow'\n                        onClick={() =>\n                            this.setState({\n                                ...this.state,\n                                closed: true\n                            })\n                        }>\n                        <FontAwesomeIcon icon={faArrowLeft} />\n                    </div>\n                )}\n                <span className='input-card-title'>\n                    Insira seus dados e sintomas abaixo para adicionar ao mapa\n                </span>\n                <div className='input-field'>\n                    <span>Você é:</span>\n                    <div className='radio-button-container'>\n                        <span>Médico</span>\n                        <Radio\n                            className='radio-button'\n                            checked={\n                                this.state.tipoUsuario === TipoUsuario.MEDICO\n                            }\n                            onChange={(event: any) => {\n                                if (event.target.checked) {\n                                    this.updateUser(TipoUsuario.MEDICO);\n                                }\n                            }}\n                        />\n                    </div>\n                    <div className='radio-button-container'>\n                        <span>OMS</span>\n                        <Radio\n                            className='radio-button'\n                            checked={this.state.tipoUsuario === TipoUsuario.OMS}\n                            onChange={(event: any) => {\n                                if (event.target.checked) {\n                                    this.updateUser(TipoUsuario.OMS);\n                                }\n                            }}\n                        />\n                    </div>\n                    {this.authComponent()}\n                    {this.state.tipoUsuario === TipoUsuario.MEDICO ? (\n                        <span>Localização</span>\n                    ) : (\n                        ''\n                    )}\n                    {this.state.tipoUsuario === TipoUsuario.MEDICO ? (\n                        <Autosuggest\n                            alwaysRenderSuggestions={true}\n                            suggestions={this.state.sugestoes}\n                            onSuggestionsFetchRequested={this.fieldEdited}\n                            getSuggestionValue={(data: string) => data}\n                            renderSuggestion={(data: any) => (\n                                <span>{data}</span>\n                            )}\n                            inputProps={{\n                                value: this.state.enderecoField,\n                                onChange: this.fieldEdited\n                            }}\n                            id={'1'}\n                            theme={this.state.autosuggestThemeLocal}\n                        />\n                    ) : (\n                        ''\n                    )}\n                    <span>Doença</span>\n                    <Autosuggest\n                        alwaysRenderSuggestions={true}\n                        suggestions={this.state.doencasData.sugestoes}\n                        onSuggestionsFetchRequested={this.getSugestoesDoenca}\n                        getSuggestionValue={(data: string) => data}\n                        renderSuggestion={(data: any) => <span>{data}</span>}\n                        inputProps={{\n                            value: this.state.doencasData.doencasField,\n                            onChange: this.getSugestoesDoenca\n                        }}\n                        id={'1'}\n                        theme={this.state.doencasData.autosuggestTheme}\n                    />\n                    {this.fieldsComponent()}\n                    <button onClick={this.sendData} className='send-button'>\n                        Enviar\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    sendData = () => {\n        switch (this.state.tipoUsuario) {\n            case TipoUsuario.MEDICO:\n                console.log(\n                    JSON.stringify({\n                        cremers: this.state.CREMERS,\n                        id_org: null,\n                        numeroEpidemia: null,\n                        senha: this.state.senha,\n                        idDoenca: this.state.doencasData.doencaSelecionada\n                            .idDoenca,\n                        lat: this.state.enderecoSelecionado.lat,\n                        lng: this.state.enderecoSelecionado.lon\n                    })\n                );\n                fetch(routes.enviaDadosInputcard, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        cremers: this.state.CREMERS,\n                        id_org: null,\n                        numeroEpidemia: null,\n                        senha: this.state.senha,\n                        idDoenca: this.state.doencasData.doencaSelecionada\n                            .idDoenca,\n                        lat: this.state.enderecoSelecionado.lat,\n                        lng: this.state.enderecoSelecionado.lon\n                    })\n                });\n                break;\n            case TipoUsuario.OMS:\n                console.log(\n                    JSON.stringify({\n                        cremers: null,\n                        id_org: this.state.id,\n                        numeroEpidemia: Number(this.state.threshold),\n                        senha: this.state.senha,\n                        idDoenca: this.state.doencasData.doencaSelecionada\n                            .idDoenca,\n                        lat: null,\n                        lng: null\n                    })\n                );\n                fetch(routes.enviaDadosInputcard, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({\n                        cremers: null,\n                        id_org: this.state.id,\n                        numeroEpidemia: Number(this.state.threshold),\n                        senha: this.state.senha,\n                        idDoenca: this.state.doencasData.doencaSelecionada\n                            .idDoenca,\n                        lat: null,\n                        lng: null\n                    })\n                });\n                break;\n            default:\n                throw new Error('USER NOT DEFINED');\n        }\n    };\n\n    getSugestoesDoenca = (search: any) => {\n        if (\n            search.reason === 'input-changed' &&\n            (!search.value || search.value.length === 0)\n        ) {\n            this.setState({\n                ...this.state,\n                doencasData: {\n                    ...this.state.doencasData,\n                    sugestoes: [],\n                    doencasField: search.value,\n                    autosuggestTheme: {\n                        ...this.state.doencasData.autosuggestTheme,\n                        suggestionsContainer:\n                            'autosuggest-suggest-container-hide'\n                    }\n                }\n            });\n        } else if (\n            !search.value &&\n            (search.value && search.value.length === 0)\n        ) {\n            this.setState({\n                ...this.state,\n                doencasData: {\n                    ...this.state.doencasData,\n                    sugestoes: [],\n                    doencasField: search.value\n                }\n            });\n        } else if (search.reason === 'suggestion-selected') {\n            this.setState({\n                ...this.state,\n                doencasData: {\n                    ...this.state.doencasData,\n                    sugestoes: [],\n                    doencasField: search.value,\n                    doencaSelecionada: this.state.doencasData.doencas.find(\n                        (item: TipoDoenca): boolean =>\n                            !!(item.nome === search.value)\n                    ),\n                    autosuggestTheme: {\n                        ...this.state.doencasData.autosuggestTheme,\n                        suggestionsContainer:\n                            'autosuggest-suggest-container-hide'\n                    }\n                }\n            });\n        } else if (search.reason === 'input-changed') {\n            let arraySugestoes: any = this.state.doencasData.doencas.filter(\n                (item: TipoDoenca) => item.nome.indexOf(search.value) !== -1\n            );\n            arraySugestoes = arraySugestoes.map(\n                (item: TipoDoenca) => item.nome\n            );\n            this.setState({\n                ...this.state,\n                doencasData: {\n                    ...this.state.doencasData,\n                    sugestoes: arraySugestoes,\n                    doencasField: search.value,\n                    autosuggestTheme: {\n                        ...this.state.doencasData.autosuggestTheme,\n                        suggestionsContainer: 'autosuggest-suggest-container'\n                    }\n                }\n            });\n        }\n    };\n\n    getDoencas = () => {\n        fetch(routes.getDoencas)\n            .then((data) => data.json())\n            .then((arrayDoencas) => {\n                this.props.setTipoDoenca(arrayDoencas);\n                this.setState({\n                    ...this.state,\n                    doencasData: {\n                        ...this.state.doencasData,\n                        doencas: arrayDoencas,\n                        sugestoes: arrayDoencas.map(\n                            (item: TipoDoenca) => item.nome\n                        )\n                    }\n                });\n            });\n    };\n\n    updateThreshold = (threshold: number) => {\n        this.setState({\n            ...this.state,\n            threshold\n        });\n    };\n\n    updateUser = (user: TipoUsuario) => {\n        this.setState({\n            ...this.state,\n            tipoUsuario: user\n        });\n    };\n\n    fieldsComponent = () => {\n        switch (this.state.tipoUsuario) {\n            case TipoUsuario.MEDICO:\n                return '';\n            case TipoUsuario.OMS:\n                return (\n                    <div className='input-field-auth'>\n                        <span>Limiar de epidemia</span>\n                        <Input\n                            placeholder='Insira o número de casos para tornar-se uma epidemia'\n                            onChange={(event: any) =>\n                                this.updateThreshold(event.target.value)\n                            }\n                            className='input-field'\n                        />\n                    </div>\n                );\n            default:\n                throw new Error('USER NOT DEFINED');\n        }\n    };\n\n    authComponent = () => {\n        switch (this.state.tipoUsuario) {\n            case TipoUsuario.MEDICO:\n                return (\n                    <div className='input-field-auth margin-top-clear'>\n                        <span>CREMERS</span>\n                        <Input\n                            placeholder='Digite seu número de registro no CREMERS'\n                            onChange={this.updateCREMERS}\n                            className='input-auth'\n                        />\n                        <span>Senha</span>\n                        <Input\n                            placeholder='Digite sua senha'\n                            onChange={this.updateSenha}\n                            className='input-auth'\n                            type='password'\n                        />\n                    </div>\n                );\n            case TipoUsuario.OMS:\n                return (\n                    <div className='input-field-auth margin-top-clear'>\n                        <span>ID</span>\n                        <Input\n                            placeholder='Digite seu ID de organização'\n                            onChange={this.updateId}\n                            className='input-auth'\n                        />\n                        <span>Senha</span>\n                        <Input\n                            placeholder='Digite sua senha'\n                            onChange={this.updateSenha}\n                            className='input-auth'\n                        />\n                    </div>\n                );\n            default:\n                throw new Error('USER NOT DEFINED');\n        }\n    };\n\n    updateSenha = (event: any) => {\n        this.setState({\n            ...this.state,\n            senha: event.target.value\n        });\n    };\n\n    updateId = (event: any) => {\n        this.setState({\n            ...this.state,\n            id: event.target.value\n        });\n    };\n\n    updateCREMERS = (event: any) => {\n        this.setState({\n            ...this.state,\n            CREMERS: event.target.value\n        });\n    };\n\n    fieldEdited = (search: any) => {\n        if (search && search.reason === 'suggestion-selected') {\n            const selected: any = this.state.enderecosCorrespondentes.find(\n                (item: LocationIqResponse) =>\n                    !!(search.value === item.display_name)\n            );\n            this.setState({\n                ...this.state,\n                enderecoField: search.value,\n                enderecoSelecionado: selected,\n                fieldEdited: false,\n                autosuggestThemeLocal: {\n                    ...this.state.autosuggestThemeLocal,\n                    suggestionsContainer: 'autosuggest-suggest-container-hide'\n                }\n            });\n        } else if (\n            search &&\n            search.value &&\n            search.value.length > 10 &&\n            search.reason === 'input-changed'\n        ) {\n            this.setState({\n                ...this.state,\n                enderecoField: search.value,\n                fieldEdited: true,\n                autosuggestThemeLocal: {\n                    ...this.state.autosuggestThemeLocal,\n                    suggestionsContainer: 'autosuggest-suggest-container'\n                }\n            });\n        } else if (search.value && search.value.length <= 10) {\n            this.setState({\n                ...this.state,\n                enderecoField: search.value,\n                sugestoes: [],\n                autosuggestThemeLocal: {\n                    ...this.state.autosuggestThemeLocal,\n                    suggestionsContainer: 'autosuggest-suggest-container-hide'\n                }\n            });\n        } else if (!search.value && search.reason === 'input-changed') {\n            this.setState({\n                ...this.state,\n                enderecoField: '',\n                sugestoes: [],\n                autosuggestThemeLocal: {\n                    ...this.state.autosuggestThemeLocal,\n                    suggestionsContainer: 'autosuggest-suggest-container-hide'\n                }\n            });\n        } else if (search && search.value) {\n            this.setState({\n                ...this.state,\n                enderecoField: search.value\n            });\n        }\n    };\n\n    updateAddressList = async () => {\n        if (this.state.fieldEdited) {\n            let response: any = await fetch(\n                `${LocationIqURI(this.state.enderecoField)}`\n            );\n            response = await response.json();\n            if (!response.error) {\n                let sugestoesArray: string[] = [];\n                response.forEach((item: LocationIqResponse) => {\n                    sugestoesArray.push(item.display_name);\n                });\n                this.setState({\n                    ...this.state,\n                    enderecosCorrespondentes: response,\n                    fieldEdited: false,\n                    sugestoes: sugestoesArray\n                });\n            }\n        }\n        setTimeout(this.updateAddressList, 1000);\n    };\n}\n","import React from 'react';\nimport './InfoCard.css';\nimport { EpidemiaDoenca } from '../map/Map';\nimport { TipoDoenca } from '../input-card/InputCard';\nimport * as routes from '../../routes';\n\ninterface Doenca {\n    isEpidemia: boolean;\n    nome: string;\n    quantidade: number;\n}\n\ninterface InfoCardProps {\n    doencasEpidemias: EpidemiaDoenca[];\n    doencas: TipoDoenca[];\n    mapCoords: any;\n}\n\ninterface InfoCardState {\n    doencasArea: Doenca[];\n}\n\nexport default class InfoCard extends React.Component<\n    InfoCardProps,\n    InfoCardState\n> {\n    constructor(props: InfoCardProps) {\n        super(props);\n        this.state = {\n            doencasArea: null\n        };\n        this.updateDoencas();\n    }\n\n    render() {\n        console.log(this.state);\n        const doencasEpidemiasComponent = () =>\n            this.state.doencasArea\n                ? this.state.doencasArea.map((item: Doenca) => {\n                      return (\n                          <li\n                              style={\n                                  item.isEpidemia\n                                      ? {\n                                            backgroundColor: 'red',\n                                            color: 'white'\n                                        }\n                                      : {\n                                            backgroundColor: 'transparent',\n                                            color: 'black'\n                                        }\n                              }>\n                              {item.nome} - {item.quantidade} caso(s)\n                          </li>\n                      );\n                  })\n                : '';\n        return (\n            <div className='info-card-container'>\n                <span>Doenças registradas na sua área</span>\n                <ul className='lista'>{doencasEpidemiasComponent()}</ul>\n            </div>\n        );\n    }\n\n    updateDoencas = () => {\n        console.log(this.props.mapCoords.lat);\n        console.log(this.props.mapCoords.lng);\n        fetch(\n            routes.epidemiasArea(\n                this.props.mapCoords.lat,\n                this.props.mapCoords.lng\n            )\n        )\n            .then((data) => data.json())\n            .then((doencas: Doenca[]) => {\n                console.log(doencas);\n                this.setState({ ...this.state, doencasArea: doencas });\n            });\n\n        setTimeout(this.updateDoencas, 5000);\n    };\n}\n","import React from 'react';\nimport './App.css';\nimport Header from './components/header/Header';\nimport Map, { EpidemiaDoenca } from './components/map/Map';\nimport InputCard from './components/input-card/InputCard';\nimport InfoCard from './components/info-card/InfoCard';\nimport { TipoDoenca } from './components/input-card/InputCard';\n\nexport interface AppState {\n    mapCoords: {\n        lat: number;\n        lng: number;\n    };\n    doencasEpidemias: EpidemiaDoenca[];\n    doencas: TipoDoenca[]\n}\n\nconst startingPointMap = {\n    lat: -30.056185,\n    lng: -51.172118\n};\n\nexport default class App extends React.Component<{}, AppState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            mapCoords: {\n                lat: startingPointMap.lat,\n                lng: startingPointMap.lng\n            },\n            doencasEpidemias: null,\n            doencas: null\n        };\n    }\n\n    render() {\n        return (\n            <div className='App'>\n                <Header setMapCoords={this.setMapCoords} />\n                <Map\n                    setMapCoords={this.setMapCoords}\n                    mapCoords={this.state.mapCoords}\n                    setDoencasEpidemias={this.setDoencasEpidemias}\n                    doencas={this.state.doencas}\n                />\n                <InputCard setTipoDoenca={this.setTipoDoenca}/>\n                <InfoCard mapCoords={this.state.mapCoords} doencas={this.state.doencas} doencasEpidemias={this.state.doencasEpidemias} />\n            </div>\n        );\n    }\n\n    setTipoDoenca = (doencas: TipoDoenca[]) => {\n        this.setState({\n            ...this.state,\n            doencas\n        })\n    }\n\n    setDoencasEpidemias = (doencasEpidemias: EpidemiaDoenca[]) => {\n        console.log(doencasEpidemias);\n        this.setState({\n            ...this.state,\n            doencasEpidemias\n        });\n    };\n\n    setMapCoords = (mapCoords: AppState) => {\n        this.setState(mapCoords);\n    };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Logo.f937cbfa.png\";"],"sourceRoot":""}