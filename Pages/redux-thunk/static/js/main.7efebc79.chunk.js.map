{"version":3,"sources":["logo.svg","stores/messagesStore/action-types.tsx","stores/messagesStore/reducer.tsx","App.tsx","stores/messagesStore/actions.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MessagesActionTypes","UpdateTarget","initialMessagesState","messages","initialAddressesState","addresses","App","props","fileReader","FileReader","parseAddress","obj","key","userAddress","addressStore","address","cep","className","logradouro","bairro","localidade","uf","errorMsg","saveUser","image","state","imgSrc","saveMessage","user","message","getAddress","updateInput","data","target","setState","previousState","imgSrcSelec","items","Object","keys","this","messagesStore","map","alt","src","logo","style","margin","placeholder","type","value","onChange","event","disabled","a","inputEvent","readAsDataURL","files","addEventListener","result","onClick","width","height","clearMessages","React","Component","connect","messagesReducer","addressReducer","dispatch","SAVE_MESSAGE","payload","SaveMessageAction","CLEAR_MESSAGES","GET_ADDRESS_PENDING","complemento","unidade","ibge","gia","fetch","then","json","GET_ADDRESS_SUCCESS","assign","catch","GET_ADDRESS_FAILED","SaveAddressAction","Boolean","window","location","hostname","match","rootReducer","Redux","action","store","thunkMiddleware","logger","rootElement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7efebc79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","enum MessagesActionTypes {\n    SAVE_MESSAGE = 'messages/SAVE_MESSAGE',\n    CLEAR_MESSAGES = 'messages/CLEAR_MESSAGES',\n    GET_ADDRESS_PENDING = 'messages/GET_ADDRESS_PENDING',\n    GET_ADDRESS_SUCCESS = 'messages/GET_ADDRESS_SUCCESS',\n    GET_ADDRESS_FAILED = 'messages/GET_ADDRESS_FAILED'\n}\n\nexport default MessagesActionTypes;\n","import { ActionReturn } from '../../types';\nimport MessagesActionTypes from './action-types';\nimport { MessagesPayload, CepPayload } from './actions';\n\nexport interface MessagesState {\n    messages: {\n        [user: string]: {\n            message: string;\n            image: string;\n        };\n    };\n}\n\nexport interface AddressState {\n    addresses: {\n        [user: string]: {\n            address: CepPayload;\n        };\n    };\n}\n\nconst initialMessagesState = {\n    messages: {}\n};\n\nconst initialAddressesState = {\n    addresses: {}\n};\n\nexport const messagesReducer = (\n    state = initialMessagesState,\n    action: ActionReturn<MessagesActionTypes, MessagesPayload>\n): MessagesState => {\n    switch (action.type) {\n        case MessagesActionTypes.SAVE_MESSAGE:\n            return {\n                messages: {\n                    ...state.messages,\n                    [action.payload.user]: {\n                        message: action.payload.message,\n                        image: action.payload.image\n                    }\n                }\n            };\n        case MessagesActionTypes.CLEAR_MESSAGES:\n            return initialMessagesState;\n        default:\n            return state;\n    }\n};\n\nexport const addressReducer = (\n    state = initialAddressesState,\n    action: ActionReturn<MessagesActionTypes, CepPayload>\n): AddressState => {\n    switch (action.type) {\n        case MessagesActionTypes.GET_ADDRESS_PENDING:\n        case MessagesActionTypes.GET_ADDRESS_SUCCESS:\n        case MessagesActionTypes.GET_ADDRESS_FAILED:\n            return {\n                addresses: {\n                    ...state.addresses,\n                    [action.payload.user]: {\n                        address: action.payload\n                    }\n                }\n            };\n        default:\n            return state;\n    }\n};\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport {\n  MessagesState,\n  SaveMessageAction,\n  ClearMessagesAction,\n  SaveAddressAction,\n  MessagesActionsReturn,\n  CepActionsReturn,\n  AddressState,\n  CepPayload\n} from \"./stores/messagesStore\";\nimport { Dispatch } from \"redux\";\nimport { AppState } from \".\";\n\nenum UpdateTarget {\n  message = 0,\n  user,\n  cep,\n  image\n}\n\ninterface State {\n  message: string;\n  user: string;\n  cep: string;\n  image: string;\n  imgSrc: any;\n  imgSrcSelec: string;\n}\n\ninterface Props {\n  messagesStore: MessagesState;\n  addressStore: AddressState;\n  saveMessage(\n    user: string,\n    message: string,\n    image: string\n  ): MessagesActionsReturn;\n  clearMessages(): MessagesActionsReturn;\n  getAddress(user: string, cep: string);\n}\n\nconst mapStoreToProps = (state: AppState) => ({\n  messagesStore: state.messagesReducer,\n  addressStore: state.addressReducer\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch<MessagesActionsReturn | CepActionsReturn>\n) => ({\n  saveMessage: (user: string, message: string, image: string) =>\n    dispatch(SaveMessageAction(user, message, image)),\n  clearMessages: () => dispatch(ClearMessagesAction()),\n  getAddress: (user: string, cep: string) =>\n    SaveAddressAction(dispatch, user, cep)\n});\n\nclass App extends React.Component<Props, State> {\n  fileReader = new FileReader();\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      message: \"\",\n      user: \"\",\n      cep: \"\",\n      image: \"\",\n      imgSrc: \"\",\n      imgSrcSelec: \"\"\n    };\n  }\n\n  render() {\n    const stateProps = Object.keys(this.props.messagesStore.messages);\n    const items = stateProps.map((key: string) => {\n      return (\n        <li className=\"list-item\" key={`${key} list container`}>\n          <div className=\"item-container\" key={`${key} container`}>\n            <img\n              alt={`${key} profile pic`}\n              key={`${key} profile pic`}\n              src={this.props.messagesStore.messages[key].image}\n              className=\"profile-pic\"\n            />\n            <div key={`${key} data`} className=\"user-data\">\n              <span className=\"user-text\" key={`${key} username}`}>\n                {key}\n              </span>\n              <span className=\"user-text status\" key={`${key} status`}>\n                {this.props.messagesStore.messages[key].message}\n              </span>\n            </div>\n            {this.parseAddress(\n              this.props.addressStore.addresses[key].address,\n              key\n            )}\n          </div>\n        </li>\n      );\n    });\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h3>\n            Sistema de status e endereco usando Redux, Redux-Thunk e TypeScript\n          </h3>\n          <div>\n            <span style={{ margin: 20 }}>Digite seu usuário</span>\n            <input\n              placeholder=\"Digite um usuário...\"\n              type=\"text\"\n              value={this.state.user}\n              onChange={(event: any) =>\n                this.updateInput(event.target.value, UpdateTarget.user)\n              }\n            />\n          </div>\n          <div>\n            <span style={{ margin: 20 }}>Digite uma mensagem</span>\n            <input\n              placeholder=\"Digite sua mensagem...\"\n              type=\"text\"\n              value={this.state.message}\n              onChange={(event: any) =>\n                this.updateInput(event.target.value, UpdateTarget.message)\n              }\n            />\n          </div>\n          <div>\n            <span style={{ margin: 20 }}>\n              Digite uma URI para sua foto de perfil\n            </span>\n            <input\n              placeholder=\"Digite a URI...\"\n              type=\"text\"\n              value={this.state.image}\n              disabled={this.state.imgSrc}\n              onChange={(event: any) =>\n                this.updateInput(event.target.value, UpdateTarget.image)\n              }\n            />\n            <span style={{ margin: 20 }}>or send a photo</span>\n            <input\n              placeholder=\"Envie sua foto...\"\n              type=\"file\"\n              value={this.state.imgSrcSelec}\n              disabled={!!this.state.image}\n              onChange={async (event: any) => {\n                const inputEvent = event.target;\n                this.fileReader.readAsDataURL(inputEvent.files[0]);\n                this.setState((previousState: State) => ({\n                  ...previousState,\n                  imgSrcSelec: inputEvent.value\n                }));\n                this.fileReader.addEventListener(\"loadend\", () =>\n                  this.setState((previousState: State) => ({\n                    ...previousState,\n                    imgSrc: this.fileReader.result\n                  }))\n                );\n              }}\n            ></input>\n            <button\n              onClick={() =>\n                this.setState((previousState: State) => ({\n                  ...previousState,\n                  imgSrc: \"\",\n                  imgSrcSelec: \"\"\n                }))\n              }\n            >\n              Clear selection\n            </button>\n            {this.state.imgSrc && !this.state.image ? (\n              <img\n                style={{ width: 128, height: 128 }}\n                src={this.state.imgSrc}\n                alt=\"pic sent\"\n              ></img>\n            ) : (\n              \"\"\n            )}\n          </div>\n          <div>\n            <span style={{ margin: 20 }}>Digite seu cep</span>\n            <input\n              placeholder=\"Digite seu cep...\"\n              type=\"text\"\n              value={this.state.cep}\n              onChange={(event: any) =>\n                this.updateInput(event.target.value, UpdateTarget.cep)\n              }\n            />\n          </div>\n          <div>\n            <button style={{ margin: 20 }} onClick={this.saveUser}>\n              Send\n            </button>\n            <button style={{ margin: 20 }} onClick={this.props.clearMessages}>\n              Clear store\n            </button>\n          </div>\n          <ul>{items}</ul>\n        </header>\n      </div>\n    );\n  }\n\n  parseAddress = (obj: CepPayload, key: string) => {\n    const userAddress = this.props.addressStore.addresses[key].address;\n    return obj.cep ? (\n      <div key={`${key} address`} className=\"address-data\">\n        <span className=\"address-text\" key={`${key} street`}>\n          {`${userAddress.logradouro}, ${userAddress.bairro}`}\n        </span>\n        <span className=\"address-text\" key={`${key} state`}>\n          {`${userAddress.localidade} - ${userAddress.uf}`}\n        </span>\n        <span className=\"address-text\" key={`${key} country`}>\n          Brasil\n        </span>\n      </div>\n    ) : (\n      <span className=\"address-data\">{obj.errorMsg}</span>\n    );\n  };\n\n  saveUser = () => {\n    let image: string;\n    if (this.state.image || this.state.imgSrc) {\n      image = this.state.image ? this.state.image : this.state.imgSrc;\n      this.props.saveMessage(this.state.user, this.state.message, image);\n      this.props.getAddress(this.state.user, this.state.cep);\n    }\n  };\n\n  updateInput = (data: any, target: UpdateTarget) => {\n    switch (target) {\n      case UpdateTarget.user:\n        this.setState((previousState: State) => ({\n          ...previousState,\n          user: data\n        }));\n        return;\n      case UpdateTarget.message:\n        this.setState((previousState: State) => ({\n          ...previousState,\n          message: data\n        }));\n        return;\n      case UpdateTarget.cep:\n        this.setState((previousState: State) => ({\n          ...previousState,\n          cep: data\n        }));\n        return;\n      case UpdateTarget.image:\n        this.setState((previousState: State) => ({\n          ...previousState,\n          image: data\n        }));\n        return;\n      default:\n        return;\n    }\n  };\n}\nexport default connect(\n  mapStoreToProps,\n  mapDispatchToProps\n)(App);\n","import { ActionReturn } from '../../types';\nimport MessagesActionTypes from './action-types';\nimport { Dispatch } from 'react';\n\nexport type MessagesActionsReturn = ActionReturn<MessagesActionTypes, MessagesPayload>;\n\nexport type CepActionsReturn = ActionReturn<MessagesActionTypes, CepPayload>;\n\nexport interface CepPayload {\n    errorMsg: string;\n    cep: string;\n    logradouro: string;\n    complemento: string;\n    bairro: string;\n    localidade: string;\n    uf: string;\n    unidade: string;\n    ibge: string;\n    gia: string;\n    user: string;\n}\n\nexport interface MessagesPayload {\n    message: string;\n    user: string;\n    image: string;\n}\n\nexport const SaveMessageAction = (user: string, message: string, image: string): MessagesActionsReturn => {\n    return {\n        type: MessagesActionTypes.SAVE_MESSAGE,\n        payload: {\n            user,\n            message,\n            image\n        }\n    };\n};\n\nexport const ClearMessagesAction = (): MessagesActionsReturn => {\n    return {\n        type: MessagesActionTypes.CLEAR_MESSAGES,\n        payload: null\n    };\n};\n\nexport const SaveAddressAction = (dispatch: Dispatch<CepActionsReturn>, user: string, cep: string) => {\n    dispatch({\n        type: MessagesActionTypes.GET_ADDRESS_PENDING,\n        payload: {\n            cep: null,\n            logradouro: null,\n            complemento: null,\n            bairro: null,\n            localidade: null,\n            uf: null,\n            unidade: null,\n            ibge: null,\n            gia: null,\n            user,\n            errorMsg: 'Loading...'\n        }\n    });\n    fetch(`https://viacep.com.br/ws/${cep}/json/`)\n        .then((data) => data.json())\n        .then((json) => {\n            dispatch({ type: MessagesActionTypes.GET_ADDRESS_SUCCESS, payload: Object.assign(json, { user }) });\n        })\n        .catch(() => {\n            dispatch({\n                type: MessagesActionTypes.GET_ADDRESS_FAILED,\n                payload: {\n                    cep: null,\n                    logradouro: null,\n                    complemento: null,\n                    bairro: null,\n                    localidade: null,\n                    uf: null,\n                    unidade: null,\n                    ibge: null,\n                    gia: null,\n                    user,\n                    errorMsg: 'Failed to fetch address'\n                }\n            });\n        });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as Redux from 'redux';\nimport { Provider } from 'react-redux';\nimport { messagesReducer, addressReducer } from './stores/messagesStore';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\n\nconst rootReducer = Redux.combineReducers({ messagesReducer, addressReducer });\nconst store = Redux.createStore(rootReducer, Redux.applyMiddleware(thunkMiddleware, logger));\nexport type AppState = ReturnType<typeof rootReducer>;\n\nconst rootElement = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(rootElement, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}