{"version":3,"sources":["logo.svg","stores/messagesStore/action-types.tsx","stores/messagesStore/reducer.tsx","App.tsx","stores/messagesStore/actions.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MessagesActionTypes","UpdateTarget","initialMessagesState","messages","initialAddressesState","addresses","App","props","parseAddress","obj","key","userAddress","addressStore","address","cep","className","logradouro","bairro","localidade","uf","errorMsg","saveUser","saveMessage","state","user","message","image","getAddress","updateInput","data","target","setState","previousState","items","Object","keys","this","messagesStore","map","alt","src","logo","style","margin","placeholder","type","value","onChange","event","onClick","clearMessages","React","Component","connect","messagesReducer","addressReducer","dispatch","SAVE_MESSAGE","payload","SaveMessageAction","CLEAR_MESSAGES","GET_ADDRESS_PENDING","complemento","unidade","ibge","gia","fetch","then","json","GET_ADDRESS_SUCCESS","assign","catch","GET_ADDRESS_FAILED","SaveAddressAction","Boolean","window","location","hostname","match","rootReducer","Redux","action","store","thunkMiddleware","logger","rootElement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a6517ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","enum MessagesActionTypes {\n    SAVE_MESSAGE = 'messages/SAVE_MESSAGE',\n    CLEAR_MESSAGES = 'messages/CLEAR_MESSAGES',\n    GET_ADDRESS_PENDING = 'messages/GET_ADDRESS_PENDING',\n    GET_ADDRESS_SUCCESS = 'messages/GET_ADDRESS_SUCCESS',\n    GET_ADDRESS_FAILED = 'messages/GET_ADDRESS_FAILED'\n}\n\nexport default MessagesActionTypes;\n","import { ActionReturn } from '../../types';\nimport MessagesActionTypes from './action-types';\nimport { MessagesPayload, CepPayload } from './actions';\n\nexport interface MessagesState {\n    messages: {\n        [user: string]: {\n            message: string;\n            image: string;\n        };\n    };\n}\n\nexport interface AddressState {\n    addresses: {\n        [user: string]: {\n            address: CepPayload;\n        };\n    };\n}\n\nconst initialMessagesState = {\n    messages: {}\n};\n\nconst initialAddressesState = {\n    addresses: {}\n};\n\nexport const messagesReducer = (\n    state = initialMessagesState,\n    action: ActionReturn<MessagesActionTypes, MessagesPayload>\n): MessagesState => {\n    switch (action.type) {\n        case MessagesActionTypes.SAVE_MESSAGE:\n            return {\n                messages: {\n                    ...state.messages,\n                    [action.payload.user]: {\n                        message: action.payload.message,\n                        image: action.payload.image\n                    }\n                }\n            };\n        case MessagesActionTypes.CLEAR_MESSAGES:\n            return initialMessagesState;\n        default:\n            return state;\n    }\n};\n\nexport const addressReducer = (\n    state = initialAddressesState,\n    action: ActionReturn<MessagesActionTypes, CepPayload>\n): AddressState => {\n    switch (action.type) {\n        case MessagesActionTypes.GET_ADDRESS_PENDING:\n        case MessagesActionTypes.GET_ADDRESS_SUCCESS:\n        case MessagesActionTypes.GET_ADDRESS_FAILED:\n            return {\n                addresses: {\n                    ...state.addresses,\n                    [action.payload.user]: {\n                        address: action.payload\n                    }\n                }\n            };\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport {\n    MessagesState,\n    SaveMessageAction,\n    ClearMessagesAction,\n    SaveAddressAction,\n    MessagesActionsReturn,\n    CepActionsReturn,\n    AddressState,\n    CepPayload\n} from './stores/messagesStore';\nimport { Dispatch } from 'redux';\nimport { AppState } from '.';\n\nenum UpdateTarget {\n    message = 0,\n    user,\n    cep,\n    image\n}\n\ninterface State {\n    message: string;\n    user: string;\n    cep: string;\n    image: string;\n}\n\ninterface Props {\n    messagesStore: MessagesState;\n    addressStore: AddressState;\n    saveMessage(user: string, message: string, image: string): MessagesActionsReturn;\n    clearMessages(): MessagesActionsReturn;\n    getAddress(user: string, cep: string);\n}\n\nconst mapStoreToProps = (state: AppState) => ({\n    messagesStore: state.messagesReducer,\n    addressStore: state.addressReducer\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<MessagesActionsReturn | CepActionsReturn>) => ({\n    saveMessage: (user: string, message: string, image: string) => dispatch(SaveMessageAction(user, message, image)),\n    clearMessages: () => dispatch(ClearMessagesAction()),\n    getAddress: (user: string, cep: string) => SaveAddressAction(dispatch, user, cep)\n});\n\nclass App extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            message: '',\n            user: '',\n            cep: '',\n            image: ''\n        };\n    }\n\n    render() {\n        const stateProps = Object.keys(this.props.messagesStore.messages);\n        const items = stateProps.map((key: string) => {\n            return (\n                <li className='list-item' key={`${key} list container`}>\n                    <div className='item-container' key={`${key} container`}>\n                        <img\n                            alt={`${key} profile pic`}\n                            key={`${key} profile pic`}\n                            src={this.props.messagesStore.messages[key].image}\n                            className='profile-pic'\n                        />\n                        <div key={`${key} data`} className='user-data'>\n                            <span className='user-text' key={`${key} username}`}>\n                                {key}\n                            </span>\n                            <span className='user-text status' key={`${key} status`}>\n                                {this.props.messagesStore.messages[key].message}\n                            </span>\n                        </div>\n                        {this.parseAddress(this.props.addressStore.addresses[key].address, key)}\n                    </div>\n                </li>\n            );\n        });\n        return (\n            <div className='App'>\n                <header className='App-header'>\n                    <img src={logo} className='App-logo' alt='logo' />\n                    <h3>Sistema de status e endereco usando Redux, Redux-Thunk e TypeScript</h3>\n                    <div>\n                        <span style={{ margin: 20 }}>Digite seu usuário</span>\n                        <input\n                            placeholder='Digite um usuário...'\n                            type='text'\n                            value={this.state.user}\n                            onChange={(event: any) => this.updateInput(event.target.value, UpdateTarget.user)}\n                        />\n                    </div>\n                    <div>\n                        <span style={{ margin: 20 }}>Digite uma mensagem</span>\n                        <input\n                            placeholder='Digite sua mensagem...'\n                            type='text'\n                            value={this.state.message}\n                            onChange={(event: any) => this.updateInput(event.target.value, UpdateTarget.message)}\n                        />\n                    </div>\n                    <div>\n                        <span style={{ margin: 20 }}>Digite uma URI para sua foto de perfil</span>\n                        <input\n                            placeholder='Digite a URI...'\n                            type='text'\n                            value={this.state.image}\n                            onChange={(event: any) => this.updateInput(event.target.value, UpdateTarget.image)}\n                        />\n                    </div>\n                    <div>\n                        <span style={{ margin: 20 }}>Digite seu cep</span>\n                        <input\n                            placeholder='Digite seu cep...'\n                            type='text'\n                            value={this.state.cep}\n                            onChange={(event: any) => this.updateInput(event.target.value, UpdateTarget.cep)}\n                        />\n                    </div>\n                    <div>\n                        <button style={{ margin: 20 }} onClick={this.saveUser}>\n                            Send\n                        </button>\n                        <button style={{ margin: 20 }} onClick={this.props.clearMessages}>\n                            Clear\n                        </button>\n                    </div>\n                    <ul>{items}</ul>\n                </header>\n            </div>\n        );\n    }\n\n    parseAddress = (obj: CepPayload, key: string) => {\n        const userAddress = this.props.addressStore.addresses[key].address\n        return obj.cep ? (\n            <div key={`${key} address`} className='address-data'>\n                <span className='address-text' key={`${key} street`}>\n                    {`${userAddress.logradouro}, ${userAddress.bairro}`}\n                </span>\n                <span className='address-text' key={`${key} state`}>\n                    {`${userAddress.localidade} - ${userAddress.uf}`}\n                </span>\n                <span className='address-text' key={`${key} country`}>\n                    Brasil\n                </span>\n            </div>\n        ) : <span className='address-data'>{obj.errorMsg}</span>;\n    };\n\n    saveUser = () => {\n        this.props.saveMessage(this.state.user, this.state.message, this.state.image);\n        this.props.getAddress(this.state.user, this.state.cep);\n    };\n\n    updateInput = (data: any, target: UpdateTarget) => {\n        switch (target) {\n            case UpdateTarget.user:\n                this.setState((previousState: State) => ({\n                    ...previousState,\n                    user: data\n                }));\n                return;\n            case UpdateTarget.message:\n                this.setState((previousState: State) => ({\n                    ...previousState,\n                    message: data\n                }));\n                return;\n            case UpdateTarget.cep:\n                this.setState((previousState: State) => ({\n                    ...previousState,\n                    cep: data\n                }));\n                return;\n            case UpdateTarget.image:\n                this.setState((previousState: State) => ({\n                    ...previousState,\n                    image: data\n                }));\n                return;\n            default:\n                return;\n        }\n    };\n}\nexport default connect(\n    mapStoreToProps,\n    mapDispatchToProps\n)(App);\n","import { ActionReturn } from '../../types';\nimport MessagesActionTypes from './action-types';\nimport { Dispatch } from 'react';\n\nexport type MessagesActionsReturn = ActionReturn<MessagesActionTypes, MessagesPayload>;\n\nexport type CepActionsReturn = ActionReturn<MessagesActionTypes, CepPayload>;\n\nexport interface CepPayload {\n    errorMsg: string;\n    cep: string;\n    logradouro: string;\n    complemento: string;\n    bairro: string;\n    localidade: string;\n    uf: string;\n    unidade: string;\n    ibge: string;\n    gia: string;\n    user: string;\n}\n\nexport interface MessagesPayload {\n    message: string;\n    user: string;\n    image: string;\n}\n\nexport const SaveMessageAction = (user: string, message: string, image: string): MessagesActionsReturn => {\n    return {\n        type: MessagesActionTypes.SAVE_MESSAGE,\n        payload: {\n            user,\n            message,\n            image\n        }\n    };\n};\n\nexport const ClearMessagesAction = (): MessagesActionsReturn => {\n    return {\n        type: MessagesActionTypes.CLEAR_MESSAGES,\n        payload: null\n    };\n};\n\nexport const SaveAddressAction = (dispatch: Dispatch<CepActionsReturn>, user: string, cep: string) => {\n    dispatch({\n        type: MessagesActionTypes.GET_ADDRESS_PENDING,\n        payload: {\n            cep: null,\n            logradouro: null,\n            complemento: null,\n            bairro: null,\n            localidade: null,\n            uf: null,\n            unidade: null,\n            ibge: null,\n            gia: null,\n            user,\n            errorMsg: 'Loading...'\n        }\n    });\n    fetch(`https://viacep.com.br/ws/${cep}/json/`)\n        .then((data) => data.json())\n        .then((json) => {\n            dispatch({ type: MessagesActionTypes.GET_ADDRESS_SUCCESS, payload: Object.assign(json, { user }) });\n        })\n        .catch(() => {\n            dispatch({\n                type: MessagesActionTypes.GET_ADDRESS_FAILED,\n                payload: {\n                    cep: null,\n                    logradouro: null,\n                    complemento: null,\n                    bairro: null,\n                    localidade: null,\n                    uf: null,\n                    unidade: null,\n                    ibge: null,\n                    gia: null,\n                    user,\n                    errorMsg: 'Failed to fetch address'\n                }\n            });\n        });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as Redux from 'redux';\nimport { Provider } from 'react-redux';\nimport { messagesReducer, addressReducer } from './stores/messagesStore';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\n\nconst rootReducer = Redux.combineReducers({ messagesReducer, addressReducer });\nconst store = Redux.createStore(rootReducer, Redux.applyMiddleware(thunkMiddleware, logger));\nexport type AppState = ReturnType<typeof rootReducer>;\n\nconst rootElement = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(rootElement, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}